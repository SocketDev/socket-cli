import { beforeEach, describe, expect, it, vi } from 'vitest'

import { cveToGhsa } from './cve-to-ghsa-stub.mts'
import { convertCveToGhsa } from '../../src/utils/cve-to-ghsa.mts'

// Mock dependencies.
vi.mock('../../src/utils/errors.mts', () => ({
  getErrorCause: vi.fn(e => e?.message || String(e)),
}))

vi.mock('../../src/utils/github.mts', () => ({
  cacheFetch: vi.fn(),
  getOctokit: vi.fn(() => ({
    rest: {
      securityAdvisories: {
        listGlobalAdvisories: vi.fn(),
      },
    },
  })),
}))

describe('cveToGhsa', () => {
  it('returns undefined for CVEs', () => {
    // The stub implementation returns undefined for all CVEs.
    const ghsa = cveToGhsa('CVE-2021-44228')
    expect(ghsa).toBeUndefined()
  })

  it('returns undefined for unknown CVE', () => {
    const ghsa = cveToGhsa('CVE-9999-99999')
    expect(ghsa).toBeUndefined()
  })

  it('handles invalid CVE format', () => {
    const ghsa = cveToGhsa('NOT-A-CVE')
    expect(ghsa).toBeUndefined()
  })

  it('handles empty string', () => {
    const ghsa = cveToGhsa('')
    expect(ghsa).toBeUndefined()
  })

  it('handles null/undefined input', () => {
    // @ts-expect-error Testing runtime behavior
    expect(cveToGhsa(null)).toBeUndefined()
    // @ts-expect-error Testing runtime behavior
    expect(cveToGhsa(undefined)).toBeUndefined()
  })

  it('is case sensitive', () => {
    const upperResult = cveToGhsa('CVE-2021-44228')
    const lowerResult = cveToGhsa('cve-2021-44228')
    // The function should handle case properly.
    expect(typeof upperResult === typeof lowerResult).toBe(true)
  })
})

describe('convertCveToGhsa', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  it('successfully converts CVE to GHSA', async () => {
    const { cacheFetch, getOctokit } = vi.mocked(
      await import('../../src/utils/github.mts'),
    )
    const mockOctokit = {
      rest: {
        securityAdvisories: {
          listGlobalAdvisories: vi.fn().mockResolvedValue({
            data: [
              {
                ghsa_id: 'GHSA-abcd-efgh-ijkl',
                cve_id: 'CVE-2023-12345',
              },
            ],
          }),
        },
      },
    }

    getOctokit.mockReturnValue(mockOctokit as any)
    cacheFetch.mockImplementation(async (_, fn) => fn())

    const result = await convertCveToGhsa('CVE-2023-12345')

    expect(result).toEqual({
      ok: true,
      data: 'GHSA-abcd-efgh-ijkl',
    })

    expect(cacheFetch).toHaveBeenCalledWith(
      'cve-to-ghsa-CVE-2023-12345',
      expect.any(Function),
    )
  })

  it('returns error when no GHSA found', async () => {
    const { cacheFetch, getOctokit } = vi.mocked(
      await import('../../src/utils/github.mts'),
    )
    const mockOctokit = {
      rest: {
        securityAdvisories: {
          listGlobalAdvisories: vi.fn().mockResolvedValue({
            data: [],
          }),
        },
      },
    }

    getOctokit.mockReturnValue(mockOctokit as any)
    cacheFetch.mockImplementation(async (_, fn) => fn())

    const result = await convertCveToGhsa('CVE-2023-99999')

    expect(result).toEqual({
      ok: false,
      message: 'No GHSA found for CVE CVE-2023-99999',
    })
  })

  it('handles API errors gracefully', async () => {
    const { cacheFetch, getOctokit } = vi.mocked(
      await import('../../src/utils/github.mts'),
    )
    const mockError = new Error('API rate limit exceeded')
    const mockOctokit = {
      rest: {
        securityAdvisories: {
          listGlobalAdvisories: vi.fn().mockRejectedValue(mockError),
        },
      },
    }

    getOctokit.mockReturnValue(mockOctokit as any)
    cacheFetch.mockImplementation(async (_, fn) => fn())

    const result = await convertCveToGhsa('CVE-2023-12345')

    expect(result).toEqual({
      ok: false,
      message: 'Failed to convert CVE to GHSA: API rate limit exceeded',
    })
  })

  it('uses cache key correctly', async () => {
    const { cacheFetch, getOctokit } = vi.mocked(
      await import('../../src/utils/github.mts'),
    )
    const mockOctokit = {
      rest: {
        securityAdvisories: {
          listGlobalAdvisories: vi.fn().mockResolvedValue({
            data: [
              {
                ghsa_id: 'GHSA-test-test-test',
                cve_id: 'CVE-2024-00001',
              },
            ],
          }),
        },
      },
    }

    getOctokit.mockReturnValue(mockOctokit as any)
    cacheFetch.mockImplementation(async (_, fn) => fn())

    await convertCveToGhsa('CVE-2024-00001')

    expect(cacheFetch).toHaveBeenCalledWith(
      'cve-to-ghsa-CVE-2024-00001',
      expect.any(Function),
    )
  })

  it('calls GitHub API with correct parameters', async () => {
    const { cacheFetch, getOctokit } = vi.mocked(
      await import('../../src/utils/github.mts'),
    )
    const listGlobalAdvisories = vi.fn().mockResolvedValue({
      data: [
        {
          ghsa_id: 'GHSA-1234-5678-9012',
          cve_id: 'CVE-2023-45678',
        },
      ],
    })
    const mockOctokit = {
      rest: {
        securityAdvisories: {
          listGlobalAdvisories,
        },
      },
    }

    getOctokit.mockReturnValue(mockOctokit as any)
    cacheFetch.mockImplementation(async (_, fn) => fn())

    await convertCveToGhsa('CVE-2023-45678')

    expect(listGlobalAdvisories).toHaveBeenCalledWith({
      cve_id: 'CVE-2023-45678',
      per_page: 1,
    })
  })

  it('handles network errors', async () => {
    const { cacheFetch, getOctokit } = vi.mocked(
      await import('../../src/utils/github.mts'),
    )
    const networkError = new Error('Network timeout')
    const mockOctokit = {
      rest: {
        securityAdvisories: {
          listGlobalAdvisories: vi.fn().mockRejectedValue(networkError),
        },
      },
    }

    getOctokit.mockReturnValue(mockOctokit as any)
    cacheFetch.mockImplementation(async (_, fn) => fn())

    const result = await convertCveToGhsa('CVE-2023-11111')

    expect(result).toEqual({
      ok: false,
      message: 'Failed to convert CVE to GHSA: Network timeout',
    })
  })

  it('handles non-Error exceptions', async () => {
    const { cacheFetch, getOctokit } = vi.mocked(
      await import('../../src/utils/github.mts'),
    )
    const mockOctokit = {
      rest: {
        securityAdvisories: {
          listGlobalAdvisories: vi.fn().mockRejectedValue('String error'),
        },
      },
    }

    getOctokit.mockReturnValue(mockOctokit as any)
    cacheFetch.mockImplementation(async (_, fn) => fn())

    const result = await convertCveToGhsa('CVE-2023-22222')

    expect(result).toEqual({
      ok: false,
      message: 'Failed to convert CVE to GHSA: String error',
    })
  })
})
