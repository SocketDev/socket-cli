import { existsSync } from 'node:fs'

import { beforeEach, describe, expect, it, vi } from 'vitest'

import { readLockfile } from './lockfile.mts'

// Mock node:fs.
vi.mock('node:fs', () => ({
  existsSync: vi.fn(),
}))

// Mock @socketsecurity/lib/fs.
vi.mock('@socketsecurity/lib/fs', () => ({
  readFileUtf8: vi.fn(),
}))

describe('lockfile utilities', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  describe('readLockfile', () => {
    it('reads lockfile when it exists', async () => {
      const mockContent = `{
  "name": "test-project",
  "lockfileVersion": 2,
  "packages": {}
}`

      vi.mocked(existsSync).mockReturnValue(true)
      const { readFileUtf8 } = vi.mocked(
        await import('@socketsecurity/lib/fs'),
      )
      readFileUtf8.mockResolvedValue(mockContent)

      const result = await readLockfile('/path/to/package-lock.json')

      expect(result).toBe(mockContent)
      expect(existsSync).toHaveBeenCalledWith('/path/to/package-lock.json')
      expect(readFileUtf8).toHaveBeenCalledWith('/path/to/package-lock.json')
    })

    it('returns undefined when lockfile does not exist', async () => {
      vi.mocked(existsSync).mockReturnValue(false)
      const { readFileUtf8 } = vi.mocked(
        await import('@socketsecurity/lib/fs'),
      )

      const result = await readLockfile('/path/to/missing-lock.json')

      expect(result).toBeUndefined()
      expect(existsSync).toHaveBeenCalledWith('/path/to/missing-lock.json')
      expect(readFileUtf8).not.toHaveBeenCalled()
    })

    it('handles yarn.lock files', async () => {
      const yarnLockContent = `# THIS IS AN AUTOGENERATED FILE
# yarn lockfile v1

express@^4.18.0:
  version "4.18.2"
  resolved "https://registry.yarnpkg.com/express/-/express-4.18.2.tgz"
  integrity sha512-xxx
`

      vi.mocked(existsSync).mockReturnValue(true)
      const { readFileUtf8 } = vi.mocked(
        await import('@socketsecurity/lib/fs'),
      )
      readFileUtf8.mockResolvedValue(yarnLockContent)

      const result = await readLockfile('/path/to/yarn.lock')

      expect(result).toBe(yarnLockContent)
    })

    it('handles pnpm-lock.yaml files', async () => {
      const pnpmLockContent = `lockfileVersion: 5.4

specifiers:
  express: ^4.18.0

dependencies:
  express: 4.18.2
`

      vi.mocked(existsSync).mockReturnValue(true)
      const { readFileUtf8 } = vi.mocked(
        await import('@socketsecurity/lib/fs'),
      )
      readFileUtf8.mockResolvedValue(pnpmLockContent)

      const result = await readLockfile('/path/to/pnpm-lock.yaml')

      expect(result).toBe(pnpmLockContent)
    })

    it('handles empty lockfile', async () => {
      vi.mocked(existsSync).mockReturnValue(true)
      const { readFileUtf8 } = vi.mocked(
        await import('@socketsecurity/lib/fs'),
      )
      readFileUtf8.mockResolvedValue('')

      const result = await readLockfile('/path/to/empty-lock.json')

      expect(result).toBe('')
    })

    it('propagates read errors', async () => {
      vi.mocked(existsSync).mockReturnValue(true)
      const { readFileUtf8 } = vi.mocked(
        await import('@socketsecurity/lib/fs'),
      )
      readFileUtf8.mockRejectedValue(new Error('Permission denied'))

      await expect(
        readLockfile('/path/to/protected-lock.json'),
      ).rejects.toThrow('Permission denied')
    })

    it('handles different lockfile paths', async () => {
      vi.mocked(existsSync).mockReturnValue(true)
      const { readFileUtf8 } = vi.mocked(
        await import('@socketsecurity/lib/fs'),
      )
      readFileUtf8.mockResolvedValue('content')

      // Test various paths.
      await readLockfile('./package-lock.json')
      expect(existsSync).toHaveBeenCalledWith('./package-lock.json')

      await readLockfile('../package-lock.json')
      expect(existsSync).toHaveBeenCalledWith('../package-lock.json')

      await readLockfile('/absolute/path/package-lock.json')
      expect(existsSync).toHaveBeenCalledWith(
        '/absolute/path/package-lock.json',
      )
    })
  })
})
