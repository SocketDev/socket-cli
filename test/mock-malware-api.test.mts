import { describe, expect, it } from 'vitest'

import {
  createMalwarePackageResponse,
  createSafePackageResponse,
} from './mock-malware-api.mts'

describe('mock-malware-api utilities', () => {
  describe('createMalwarePackageResponse', () => {
    it('should create a malware package with correct structure', () => {
      const response = createMalwarePackageResponse()

      expect(response).toBeDefined()
      expect(response.name).toBe('evil-test-package')
      expect(response.version).toBe('1.0.0')
      expect(response.type).toBe('npm')
    })

    it('should include both malware and gptMalware alerts', () => {
      const response = createMalwarePackageResponse()

      expect(response.alerts).toHaveLength(3)

      const malwareAlert = response.alerts.find(a => a.type === 'malware')
      expect(malwareAlert).toBeDefined()
      expect(malwareAlert?.severity).toBe('critical')
      expect(malwareAlert?.action).toBe('error')

      const gptMalwareAlert = response.alerts.find(a => a.type === 'gptMalware')
      expect(gptMalwareAlert).toBeDefined()
      expect(gptMalwareAlert?.severity).toBe('critical')
      expect(gptMalwareAlert?.action).toBe('error')
    })

    it('should have extremely low security scores', () => {
      const response = createMalwarePackageResponse()

      expect(response.score?.supplyChain).toBe(0.01)
      expect(response.score?.overall).toBe(0.01)
      expect(response.score?.quality).toBe(0)
      expect(response.score?.maintenance).toBe(0)
      expect(response.score?.vulnerability).toBe(0)
      expect(response.score?.license).toBe(0)
    })
  })

  describe('createSafePackageResponse', () => {
    it('should create a safe package with correct structure', () => {
      const response = createSafePackageResponse('test-package', '2.0.0')

      expect(response).toBeDefined()
      expect(response.name).toBe('test-package')
      expect(response.version).toBe('2.0.0')
      expect(response.type).toBe('npm')
    })

    it('should have no alerts', () => {
      const response = createSafePackageResponse('test-package', '2.0.0')

      expect(response.alerts).toHaveLength(0)
    })

    it('should have perfect security scores', () => {
      const response = createSafePackageResponse('test-package', '2.0.0')

      expect(response.score?.supplyChain).toBe(1)
      expect(response.score?.overall).toBe(1)
      expect(response.score?.quality).toBe(1)
      expect(response.score?.maintenance).toBe(1)
      expect(response.score?.vulnerability).toBe(1)
      expect(response.score?.license).toBe(1)
    })
  })
})
