Index: /lodash/_baseExtremum.js
===================================================================
--- /lodash/_baseExtremum.js
+++ /lodash/_baseExtremum.js
@@ -12,19 +12,20 @@
  */
 function baseExtremum(array, iteratee, comparator) {
   var index = -1,
       length = array.length;
-
+  var computed;
+  var result;
   while (++index < length) {
     var value = array[index],
         current = iteratee(value);
 
     if (current != null && (computed === undefined
           ? (current === current && !isSymbol(current))
           : comparator(current, computed)
         )) {
-      var computed = current,
-          result = value;
+      computed = current;
+      result = value;
     }
   }
   return result;
 }
Index: /lodash/_getRawTag.js
===================================================================
--- /lodash/_getRawTag.js
+++ /lodash/_getRawTag.js
@@ -26,11 +26,12 @@
 function getRawTag(value) {
   var isOwn = hasOwnProperty.call(value, symToStringTag),
       tag = value[symToStringTag];
 
+  var unmasked
   try {
     value[symToStringTag] = undefined;
-    var unmasked = true;
+    unmasked = true;
   } catch (e) {}
 
   var result = nativeObjectToString.call(value);
   if (unmasked) {
Index: /lodash/lodash.js
===================================================================
--- /lodash/lodash.js
+++ /lodash/lodash.js
@@ -8,9 +8,8 @@
  */
 ;(function() {
 
   /** Used as a safe reference for `undefined` in pre-ES5 environments. */
-  var undefined;
 
   /** Used as the semantic version number. */
   var VERSION = '4.17.21';
 
@@ -2898,19 +2897,20 @@
      */
     function baseExtremum(array, iteratee, comparator) {
       var index = -1,
           length = array.length;
-
+      var computed;
+      var result;
       while (++index < length) {
         var value = array[index],
             current = iteratee(value);
 
         if (current != null && (computed === undefined
               ? (current === current && !isSymbol(current))
               : comparator(current, computed)
             )) {
-          var computed = current,
-              result = value;
+          computed = current;
+          result = value;
         }
       }
       return result;
     }
@@ -6048,11 +6048,12 @@
     function getRawTag(value) {
       var isOwn = hasOwnProperty.call(value, symToStringTag),
           tag = value[symToStringTag];
 
+      var unmasked
       try {
         value[symToStringTag] = undefined;
-        var unmasked = true;
+        unmasked = true;
       } catch (e) {}
 
       var result = nativeObjectToString.call(value);
       if (unmasked) {
