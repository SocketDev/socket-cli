Index: /drawille-canvas-blessed-contrib/index.js
===================================================================
--- /drawille-canvas-blessed-contrib/index.js
+++ /drawille-canvas-blessed-contrib/index.js
@@ -5,12 +5,12 @@
 var mat2d = glMatrix.mat2d;
 var vec2 = glMatrix.vec2;
 
 
-function Context(width, height, canvasClass) { 
+function Context(width, height, canvasClass) {
   var canvasClass = canvasClass || Canvas;
-  this._canvas = new canvasClass(width, height);  
-  this.canvas = this._canvas; //compatability  
+  this._canvas = new canvasClass(width, height);
+  this.canvas = this._canvas; //compatability
   this._matrix = mat2d.create();
   this._stack = [];
   this._currentPath = [];
 }
@@ -34,46 +34,46 @@
 
 function getFgCode(color) {
     // String Value
     if(typeof color == 'string' && color != 'normal') {
-        return '\033[3' + exports.colors[color] + 'm';
+        return '\x1B[3' + exports.colors[color] + 'm';
     }
     // RGB Value
     else if (Array.isArray(color) && color.length == 3)
     {
-        return '\033[38;5;' + x256(color[0],color[1],color[2]) + 'm';
+        return '\x1B[38;5;' + x256(color[0],color[1],color[2]) + 'm';
     }
     // Number
     else if (typeof color == 'number')
     {
-        return '\033[38;5;' + color + 'm';
+        return '\x1B[38;5;' + color + 'm';
     }
     // Default
     else
     {
-        return '\033[39m'
+        return '\x1B[39m'
     }
 }
 
 function getBgCode(color) {
     // String Value
     if(typeof color == 'string' && color != 'normal') {
-        return '\033[4' + exports.colors[color] + 'm';
+        return '\x1B[4' + exports.colors[color] + 'm';
     }
     // RGB Value
     else if (Array.isArray(color) && color.length == 3)
     {
-        return '\033[48;5;' + x256(color[0],color[1],color[2]) + 'm';
+        return '\x1B[48;5;' + x256(color[0],color[1],color[2]) + 'm';
     }
     // Number
     else if (typeof color == 'number')
     {
-        return '\033[48;5;' + color + 'm';
+        return '\x1B[48;5;' + color + 'm';
     }
     // Default
     else
     {
-        return '\033[49m'
+        return '\x1B[49m'
     }
 }
 
 function br(p1, p2) {
@@ -126,9 +126,9 @@
   //this._canvas.fontBg = val
 });
 
 Context.prototype.clearRect = function(x, y, w, h) {
-  quad(this._matrix, x, y, w, h, this._canvas.unset.bind(this._canvas));  
+  quad(this._matrix, x, y, w, h, this._canvas.unset.bind(this._canvas));
 };
 
 Context.prototype.fillRect = function(x, y, w, h) {
   quad(this._matrix, x, y, w, h, this._canvas.set.bind(this._canvas));
@@ -143,9 +143,9 @@
   if(!top) return;
   this._matrix = top;
 };
 
-Context.prototype.translate = function translate(x, y) {  
+Context.prototype.translate = function translate(x, y) {
   mat2d.translate(this._matrix, this._matrix, vec2.fromValues(x, y));
 };
 
 Context.prototype.rotate = function rotate(a) {
@@ -168,9 +168,9 @@
   });*/
 };
 
 Context.prototype.stroke = function stroke() {
-  
+
   if (this.lineWidth==0) return;
 
   var set = this._canvas.set.bind(this._canvas);
   for(var i = 0; i < this._currentPath.length - 1; i++) {
@@ -206,19 +206,19 @@
 Context.prototype.measureText = function measureText(str) {
   return this._canvas.measureText(str)
 };
 
-Canvas.prototype.writeText = function(str, x, y) {  
+Canvas.prototype.writeText = function(str, x, y) {
   var coord = this.getCoord(x, y)
-  for (var i=0; i<str.length; i++) {    
+  for (var i=0; i<str.length; i++) {
     this.chars[coord+i]=str[i]
   }
 
   var bg = getBgCode(this.fontBg);
   var fg = getFgCode(this.fontFg);
 
   this.chars[coord] = fg + bg + this.chars[coord]
-  this.chars[coord+str.length-1] += '\033[39m\033[49m'
+  this.chars[coord+str.length-1] += '\x1B[39m\x1B[49m'
 }
 
 var map = [
   [0x1, 0x8],
@@ -230,9 +230,9 @@
 Canvas.prototype.set = function(x,y) {
     if(!(x >= 0 && x < this.width && y >= 0 && y < this.height)) {
       return;
     }
-    
+
     var coord = this.getCoord(x, y)
     var mask = map[y%4][x%2];
 
     this.content[coord] |= mask;
@@ -254,21 +254,21 @@
       result.push(this.chars[i])
     }
     else if(this.content[i] == 0) {
       result.push(' ');
-    } else {   
+    } else {
         var colorCode = this.colors[i];
-        result.push(colorCode+String.fromCharCode(0x2800 + this.content[i]) + '\033[39m')      
-      //result.push(String.fromCharCode(0x2800 + this.content[i]))      
+        result.push(colorCode+String.fromCharCode(0x2800 + this.content[i]) + '\x1B[39m')
+      //result.push(String.fromCharCode(0x2800 + this.content[i]))
     }
   }
   result.push(delimiter);
   return result.join('');
 };
 
 module.exports = Context;
 module.exports.Canvas = function(width, height, canvasClass) {
-  
+
   var ctx;
 
   this.getContext = function() {
    return ctx = ctx || new Context(width, height, canvasClass)
