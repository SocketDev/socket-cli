diff --git a/build/index.d.ts b/build/index.d.ts
index 52de42fa99014c66f1379474a2a7da18dba25e0c..f16421c32db9ff75b9a29e6b2967e2834f776ae9 100644
--- a/build/index.d.ts
+++ b/build/index.d.ts
@@ -1313,6 +1313,13 @@ type Options<Flags extends AnyFlags> = {
 	*/
 	readonly allowUnknownFlags?: boolean;
 
+	/**
+	Whether to collect unknown flags or not.
+
+	@default false
+	*/
+  readonly collectUnknownFlags?: boolean;
+
 	/**
 	The number of spaces to use for indenting the help text.
 
@@ -1354,6 +1361,11 @@ type Result<Flags extends AnyFlags> = {
 	*/
 	flags: CamelCasedProperties<TypedFlags<Flags>> & Record<string, unknown>;
 
+  /**
+	Collection of unknown flags.
+	*/
+  unknownFlags: string[]
+
 	/**
 	Flags converted camelCase including aliases.
 	*/
diff --git a/build/index.js b/build/index.js
index f9f2afafcf263ca7785f4f733b04f06f35ab65ec..f3221c0b0c0ed71020db92baef4b605f18a4257f 100644
--- a/build/index.js
+++ b/build/index.js
@@ -2,7 +2,7 @@ import process from 'node:process';
 import { y as yargsParser, t as trimNewlines, r as redent, n as normalizePackageData, c as camelcaseKeys } from './dependencies.js';
 import { buildOptions } from './options.js';
 import { buildParserOptions } from './parser.js';
-import { checkUnknownFlags, validate, checkMissingRequiredFlags } from './validate.js';
+import { checkUnknownFlags, validate, checkMissingRequiredFlags, collectUnknownFlags } from './validate.js';
 
 const buildResult = (options, parserOptions) => {
 	const {pkg: package_} = options;
@@ -55,6 +55,21 @@ const buildResult = (options, parserOptions) => {
 	}
 
 	const flags = camelcaseKeys(argv, {exclude: ['--', /^\w$/]});
+	const unknownFlags = options.collectUnknownFlags
+    ? collectUnknownFlags(
+        options.allowUnknownFlags
+          ? yargsParser(
+              options.argv,
+              buildParserOptions({
+                ...options,
+                allowUnknownFlags: false,
+                autoHelp: false,
+                autoVersion: false
+              })
+            )._
+          : input
+      )
+    : [];
 	const unnormalizedFlags = {...flags};
 
 	validate(flags, options);
@@ -74,6 +89,7 @@ const buildResult = (options, parserOptions) => {
 	return {
 		input,
 		flags,
+		unknownFlags,
 		unnormalizedFlags,
 		pkg: package_,
 		help,
diff --git a/build/validate.js b/build/validate.js
index a42fabdc4d258013941ef8a51f742e15b77ae02d..d9fdaf39c9e912fa5cc572a96acff8be35872b5a 100644
--- a/build/validate.js
+++ b/build/validate.js
@@ -68,8 +68,10 @@ const reportUnknownFlags = unknownFlags => {
 	].join('\n'));
 };
 
+const collectUnknownFlags = input => input.filter(item => typeof item === 'string' && item.startsWith('-'));
+
 const checkUnknownFlags = input => {
-	const unknownFlags = input.filter(item => typeof item === 'string' && item.startsWith('-'));
+	const unknownFlags = collectUnknownFlags(input);
 	if (unknownFlags.length > 0) {
 		reportUnknownFlags(unknownFlags);
 		process.exit(2);
@@ -119,4 +121,4 @@ const checkMissingRequiredFlags = (flags, receivedFlags, input) => {
 	}
 };
 
-export { checkMissingRequiredFlags, checkUnknownFlags, validate };
+export { checkMissingRequiredFlags, checkUnknownFlags, collectUnknownFlags, validate };
