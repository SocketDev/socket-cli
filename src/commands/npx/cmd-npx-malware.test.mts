import { describe, expect } from 'vitest'

import constants, {
  FLAG_CONFIG,
  FLAG_DRY_RUN,
} from '../../../src/constants.mts'
import { cmdit, spawnSocketCli } from '../../../test/utils.mts'

describe('socket npx - malware detection with mocked packages', () => {
  const { binCliPath } = constants

  describe('npx with issueRules configuration', () => {
    cmdit(
      [
        'npx',
        'evil-test-package@1.0.0',
        FLAG_DRY_RUN,
        '-c',
        '{"apiToken":"fakeToken","issueRules":{"malware":true}}',
      ],
      'should handle npx with -c flag and malware issueRule for evil-test-package',
      async cmd => {
        const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
        expect(stdout).toMatchInlineSnapshot(`""`)
        expect(code, 'dry-run npx with -c should exit with code 0').toBe(0)
      },
    )

    cmdit(
      [
        'npx',
        'evil-test-package@1.0.0',
        FLAG_DRY_RUN,
        '-c',
        '{"apiToken":"fakeToken","issueRules":{"gptMalware":true}}',
      ],
      'should handle npx with -c flag and gptMalware issueRule for evil-test-package',
      async cmd => {
        const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
        expect(stdout).toMatchInlineSnapshot(`""`)
        expect(code, 'dry-run npx with -c should exit with code 0').toBe(0)
      },
    )

    cmdit(
      [
        'npx',
        'evil-test-package@1.0.0',
        FLAG_DRY_RUN,
        '-c',
        '{"apiToken":"fakeToken","issueRules":{"malware":true,"gptMalware":true}}',
      ],
      'should handle npx with -c flag and multiple issueRules for evil-test-package',
      async cmd => {
        const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
        expect(stdout).toMatchInlineSnapshot(`""`)
        expect(
          code,
          'dry-run npx with multiple issueRules should exit with code 0',
        ).toBe(0)
      },
    )

    cmdit(
      [
        'npx',
        'evil-test-package@1.0.0',
        FLAG_DRY_RUN,
        FLAG_CONFIG,
        '{"apiToken":"fakeToken","issueRules":{"malware":true,"gptMalware":true}}',
      ],
      'should handle npx with --config flag and multiple issueRules for evil-test-package',
      async cmd => {
        const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
        expect(stdout).toMatchInlineSnapshot(`""`)
        expect(code, 'dry-run npx with --config should exit with code 0').toBe(
          0,
        )
      },
    )
  })
})
