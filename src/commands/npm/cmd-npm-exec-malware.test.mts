import { beforeEach, describe, expect, it, vi } from 'vitest'

import constants, { FLAG_CONFIG } from '../../../src/constants.mts'
import { cmdit, spawnSocketCli } from '../../../test/utils.mts'
import {
  createMalwarePackageResponse,
  createSafePackageResponse,
  setupMalwareMocks,
} from '../../../test/mock-malware-api.mts'

// Mock the SDK and API calls.
const mockSetupSdk = vi.hoisted(() => vi.fn())
const mockHandleApiCall = vi.hoisted(() => vi.fn())
const mockBatchPackageFetch = vi.hoisted(() => vi.fn())

vi.mock('../../utils/sdk.mts', () => ({
  setupSdk: mockSetupSdk,
  getPublicApiToken: vi.fn(() => 'test-token'),
}))

vi.mock('../../utils/api.mts', () => ({
  handleApiCall: mockHandleApiCall,
}))

describe('socket npm exec - malware detection', () => {
  const { binCliPath } = constants

  beforeEach(() => {
    vi.clearAllMocks()

    // Setup mocks for malware detection.
    const mocks = setupMalwareMocks()

    // Configure the SDK mock.
    mockSetupSdk.mockResolvedValue({
      ok: true,
      data: {
        batchPackageFetch: mocks.mockBatchPackageFetch,
      },
    })

    // Configure API call handler.
    mockHandleApiCall.mockImplementation(async (promise) => {
      const result = await promise
      return { ok: true, data: result.data }
    })
  })

  describe('issueRules with malware configuration', () => {
    it('should detect malware with -c flag and malware issueRule', async () => {
      // Note: Since these are integration tests using dry-run, we're verifying
      // that the CLI accepts the configuration. Actual malware detection would
      // require running without dry-run and intercepting the API calls.
      const cmd = [
        'npm',
        'exec',
        '-c',
        '{"issueRules":{"malware":true}}',
        'evil-test-package@1.0.0',
        'hello',
        '--dry-run',
        FLAG_CONFIG,
        '{"apiToken":"fakeToken"}',
      ]

      const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
      expect(stdout).toMatchInlineSnapshot(`""`)
      expect(code, 'should exit with code 0 in dry-run mode').toBe(0)
    })

    it('should detect gptMalware with -c flag and gptMalware issueRule', async () => {
      const cmd = [
        'npm',
        'exec',
        '-c',
        '{"issueRules":{"gptMalware":true}}',
        'evil-test-package@1.0.0',
        'hello',
        '--dry-run',
        FLAG_CONFIG,
        '{"apiToken":"fakeToken"}',
      ]

      const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
      expect(stdout).toMatchInlineSnapshot(`""`)
      expect(code, 'should exit with code 0 in dry-run mode').toBe(0)
    })

    it('should detect both malware types with combined issueRules', async () => {
      const cmd = [
        'npm',
        'exec',
        '-c',
        '{"issueRules":{"malware":true,"gptMalware":true}}',
        'evil-test-package@1.0.0',
        'hello',
        '--dry-run',
        FLAG_CONFIG,
        '{"apiToken":"fakeToken"}',
      ]

      const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
      expect(stdout).toMatchInlineSnapshot(`""`)
      expect(code, 'should exit with code 0 in dry-run mode').toBe(0)
    })

    it('should handle --config flag with malware issueRules', async () => {
      const cmd = [
        'npm',
        'exec',
        FLAG_CONFIG,
        '{"issueRules":{"malware":true,"gptMalware":true}}',
        'evil-test-package@1.0.0',
        'hello',
        '--dry-run',
        FLAG_CONFIG,
        '{"apiToken":"fakeToken"}',
      ]

      const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
      expect(stdout).toMatchInlineSnapshot(`""`)
      expect(code, 'should exit with code 0 in dry-run mode').toBe(0)
    })

    it('should not trigger alerts for safe packages', async () => {
      const cmd = [
        'npm',
        'exec',
        '-c',
        '{"issueRules":{"malware":true,"gptMalware":true}}',
        'safe-package@1.0.0',
        'hello',
        '--dry-run',
        FLAG_CONFIG,
        '{"apiToken":"fakeToken"}',
      ]

      const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
      expect(stdout).toMatchInlineSnapshot(`""`)
      expect(code, 'should exit with code 0 for safe packages').toBe(0)
    })

    it('should handle npm exec with package and command arguments', async () => {
      const cmd = [
        'npm',
        'exec',
        '-c',
        '{"issueRules":{"malware":true,"gptMalware":true}}',
        '--package=evil-test-package@1.0.0',
        '--',
        'evil-command',
        '--dry-run',
        FLAG_CONFIG,
        '{"apiToken":"fakeToken"}',
      ]

      const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
      expect(stdout).toMatchInlineSnapshot(`""`)
      expect(code, 'should exit with code 0 in dry-run mode').toBe(0)
    })
  })

  describe('malware detection validation', () => {
    it('should properly format malware alerts when detected', () => {
      const malwareResponse = createMalwarePackageResponse()

      // Verify the malware response structure.
      expect(malwareResponse.alerts).toHaveLength(3)

      const malwareAlert = malwareResponse.alerts.find(a => a.type === 'malware')
      expect(malwareAlert).toBeDefined()
      expect(malwareAlert?.severity).toBe('critical')
      expect(malwareAlert?.action).toBe('error')

      const gptMalwareAlert = malwareResponse.alerts.find(a => a.type === 'gptMalware')
      expect(gptMalwareAlert).toBeDefined()
      expect(gptMalwareAlert?.severity).toBe('critical')
      expect(gptMalwareAlert?.action).toBe('error')
    })

    it('should properly format safe package responses', () => {
      const safeResponse = createSafePackageResponse('lodash', '4.17.21')

      // Verify safe package has no alerts.
      expect(safeResponse.alerts).toHaveLength(0)
      expect(safeResponse.score.supplyChain).toBe(1)
      expect(safeResponse.score.overall).toBe(1)
    })
  })
})