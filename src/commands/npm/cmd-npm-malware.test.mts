import { describe, expect, it } from 'vitest'

import constants, {
  FLAG_CONFIG,
  FLAG_DRY_RUN,
} from '../../../src/constants.mts'
import { cmdit, spawnSocketCli } from '../../../test/utils.mts'

describe('socket npm - malware detection with mocked packages', () => {
  const { binCliPath } = constants

  describe('npm exec with issueRules configuration', () => {
    cmdit(
      [
        'npm',
        'exec',
        'evil-test-package@1.0.0',
        FLAG_DRY_RUN,
        '-c',
        '{"apiToken":"fakeToken","issueRules":{"malware":true}}',
      ],
      'should handle exec with -c flag and malware issueRule for evil-test-package',
      async cmd => {
        const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
        expect(stdout).toMatchInlineSnapshot(`"[DryRun]: Bailing now"`)
        expect(code, 'dry-run exec with -c should exit with code 0').toBe(0)
      },
    )

    cmdit(
      [
        'npm',
        'exec',
        'evil-test-package@1.0.0',
        FLAG_DRY_RUN,
        '-c',
        '{"apiToken":"fakeToken","issueRules":{"gptMalware":true}}',
      ],
      'should handle exec with -c flag and gptMalware issueRule for evil-test-package',
      async cmd => {
        const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
        expect(stdout).toMatchInlineSnapshot(`"[DryRun]: Bailing now"`)
        expect(code, 'dry-run exec with -c should exit with code 0').toBe(0)
      },
    )

    cmdit(
      [
        'npm',
        'exec',
        'evil-test-package@1.0.0',
        FLAG_DRY_RUN,
        '-c',
        '{"apiToken":"fakeToken","issueRules":{"malware":true,"gptMalware":true}}',
      ],
      'should handle exec with -c flag and multiple issueRules for evil-test-package',
      async cmd => {
        const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
        expect(stdout).toMatchInlineSnapshot(`"[DryRun]: Bailing now"`)
        expect(
          code,
          'dry-run exec with multiple issueRules should exit with code 0',
        ).toBe(0)
      },
    )

    cmdit(
      [
        'npm',
        'exec',
        'evil-test-package@1.0.0',
        FLAG_DRY_RUN,
        FLAG_CONFIG,
        '{"apiToken":"fakeToken","issueRules":{"malware":true,"gptMalware":true}}',
      ],
      'should handle exec with --config flag and multiple issueRules for evil-test-package',
      async cmd => {
        const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
        expect(stdout).toMatchInlineSnapshot(`"[DryRun]: Bailing now"`)
        expect(code, 'dry-run exec with --config should exit with code 0').toBe(
          0,
        )
      },
    )
  })

  describe('npm install with issueRules configuration', () => {
    cmdit(
      [
        'npm',
        'install',
        'evil-test-package@1.0.0',
        FLAG_DRY_RUN,
        '-c',
        '{"apiToken":"fakeToken","issueRules":{"malware":true,"gptMalware":true}}',
      ],
      'should handle install with -c flag and multiple issueRules for evil-test-package',
      async cmd => {
        const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
        expect(stdout).toMatchInlineSnapshot(`"[DryRun]: Bailing now"`)
        expect(code, 'dry-run install with -c should exit with code 0').toBe(0)
      },
    )

    cmdit(
      [
        'npm',
        'i',
        'evil-test-package@1.0.0',
        FLAG_DRY_RUN,
        '-c',
        '{"apiToken":"fakeToken","issueRules":{"malware":true,"gptMalware":true}}',
      ],
      'should handle i alias with -c flag and multiple issueRules for evil-test-package',
      async cmd => {
        const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
        expect(stdout).toMatchInlineSnapshot(`"[DryRun]: Bailing now"`)
        expect(code, 'dry-run i with -c should exit with code 0').toBe(0)
      },
    )

    cmdit(
      [
        'npm',
        'install',
        'evil-test-package@1.0.0',
        FLAG_DRY_RUN,
        FLAG_CONFIG,
        '{"apiToken":"fakeToken","issueRules":{"malware":true,"gptMalware":true}}',
      ],
      'should handle install with --config flag and multiple issueRules for evil-test-package',
      async cmd => {
        const { code, stdout } = await spawnSocketCli(binCliPath, cmd)
        expect(stdout).toMatchInlineSnapshot(`"[DryRun]: Bailing now"`)
        expect(
          code,
          'dry-run install with --config should exit with code 0',
        ).toBe(0)
      },
    )
  })
})
