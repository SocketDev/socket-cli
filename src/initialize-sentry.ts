// This should ONLY be included in the special Sentry build! Otherwise the
// Sentry dependency won't even be present in the manifest.
// This file should then be imported once at the top of any entrypoint as:
// ```
// import './utils/initialize-sentry'
// ```
// (no "from"; this doesn't export anything). That will setup the error hooks.

// Note: KEEP DEPS HERE TO A MINIMUM. Sentry should be first thing to run.
// @ts-ignore
import * as Sentry from '@sentry/node'

// Enabled in this build unless explicitly disabled for some reason
const ENABLE_SENTRY = process.env['SOCKET_DISABLE_SENTRY'] === '1'

const debugging = process.env['SOCKET_CLI_DEBUG'] === '1'

if (ENABLE_SENTRY) {
  if (debugging) {
    console.log('[DEBUG] Setting up Sentry...')
  }
  Sentry.init({
    // debug: true,
    onFatalError(error: Error) {
      if (debugging) {
        console.error('[DEBUG] [Sentry onFatalError]:', error)
      }
    },
    enabled: ENABLE_SENTRY,

    dsn: 'https://66736701db8e4ffac046bd09fa6aaced@o555220.ingest.us.sentry.io/4508846967619585',
    integrations: []
  })
  Sentry.setTag(
    'environment',
    // @ts-ignore
    typeof SOCKET_PUB !== 'undefined' && SOCKET_PUB
      ? 'pub'
      : process.env['NODE_ENV']
  )
  Sentry.setTag('debugging', debugging)
  // The version variable should be generated by rollup and injected at the top
  Sentry.setTag(
    'version',
    // @ts-ignore
    typeof SOCKET_CLI_VERSION !== 'undefined' ? SOCKET_CLI_VERSION : 'unknown'
  )

  if (debugging) {
    console.log('[DEBUG] Set up Sentry.')
  }
} else {
  if (debugging) {
    console.log('[DEBUG] Sentry disabled explicitly.')
  }
}
