/** @fileoverview Tests for CVE to GHSA conversion utilities. */

import { beforeEach, describe, expect, it, vi } from 'vitest'

import { convertCveToGhsa } from './cve-to-ghsa.mts'

// Create a shared mock for octokit
const mockListGlobalAdvisories = vi.fn()

// Mock the GitHub utilities
vi.mock('./github.mts', () => ({
  getOctokit: vi.fn(() => ({
    rest: {
      securityAdvisories: {
        listGlobalAdvisories: mockListGlobalAdvisories,
      },
    },
  })),
  cacheFetch: vi.fn((_, fn) => fn()),
}))

describe('cve-to-ghsa utilities', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  describe('convertCveToGhsa', () => {
    it('should convert CVE to GHSA successfully', async () => {
      mockListGlobalAdvisories.mockResolvedValue({
        data: [{ ghsa_id: 'GHSA-1234-5678-9abc' }],
      })

      const result = await convertCveToGhsa('CVE-2023-1234')

      expect(result.ok).toBe(true)
      if (result.ok) {
        expect(result.data).toBe('GHSA-1234-5678-9abc')
      }
    })

    it('should return error when no GHSA found', async () => {
      mockListGlobalAdvisories.mockResolvedValue({
        data: [],
      })

      const result = await convertCveToGhsa('CVE-2023-9999')

      expect(result.ok).toBe(false)
      if (!result.ok) {
        expect(result.message).toContain('No GHSA found')
        expect(result.message).toContain('CVE-2023-9999')
      }
    })

    it('should handle API errors', async () => {
      mockListGlobalAdvisories.mockRejectedValue(
        new Error('API rate limit exceeded'),
      )

      const result = await convertCveToGhsa('CVE-2023-1234')

      expect(result.ok).toBe(false)
      if (!result.ok) {
        expect(result.message).toContain('Failed to convert CVE to GHSA')
      }
    })

    it('should use cache for repeated requests', async () => {
      mockListGlobalAdvisories.mockResolvedValue({
        data: [{ ghsa_id: 'GHSA-1234-5678-9abc' }],
      })

      const { cacheFetch } = await import('./github.mts')
      const mockCacheFetch = vi.mocked(cacheFetch)

      await convertCveToGhsa('CVE-2023-1234')

      expect(mockCacheFetch).toHaveBeenCalledWith(
        'cve-to-ghsa-CVE-2023-1234',
        expect.any(Function),
      )
    })

    it('should handle multiple results by returning first', async () => {
      mockListGlobalAdvisories.mockResolvedValue({
        data: [
          { ghsa_id: 'GHSA-1111-2222-3333' },
          { ghsa_id: 'GHSA-4444-5555-6666' },
        ],
      })

      const result = await convertCveToGhsa('CVE-2023-1234')

      expect(result.ok).toBe(true)
      if (result.ok) {
        expect(result.data).toBe('GHSA-1111-2222-3333')
      }
    })

    it('should handle different CVE formats', async () => {
      mockListGlobalAdvisories.mockResolvedValue({
        data: [{ ghsa_id: 'GHSA-abcd-efgh-ijkl' }],
      })

      const result = await convertCveToGhsa('CVE-2024-12345')

      expect(result.ok).toBe(true)
      if (result.ok) {
        expect(result.data).toBe('GHSA-abcd-efgh-ijkl')
      }
    })
  })
})
