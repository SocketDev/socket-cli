// This file should be imported once at the top of any entrypoint as:
// ```
// import './utils/initialize-sentry'
// ```
// (no "from"; this doesn't export anything). That will setup the error hooks.

import * as Sentry from '@sentry/node'

const ENABLE_SENTRY = !(process.env['SOCKET_CLI_SENTRY'] === '0')
const debugging = process.env['SOCKET_CLI_DEBUG'] === '1'

// Note: this should not change the value if set from rollup but if somehow
// running raw sources, at least it won't cause a runtime error (implicit global)
// See rollup config.
// DO NOT ADD INITIALIZER TO THIS VAR!
// @ts-ignore
var SOCKET_CLI_VERSION

if (ENABLE_SENTRY) {
  if (debugging) {
    console.log('[DEBUG] Setting up Sentry...')
  }
  Sentry.init({
    // debug: true,
    // onFatalError(error: Error) {
    //   console.log('[Sentry onFatalError]: oops', error)
    // },
    enabled: ENABLE_SENTRY,

    dsn: 'https://66736701db8e4ffac046bd09fa6aaced@o555220.ingest.us.sentry.io/4508846967619585',
    integrations: []
  })
  Sentry.setTag('environment', 'dev') // TBD: how to determine this?
  Sentry.setTag('version', SOCKET_CLI_VERSION) // Generated by rollup
  Sentry.setTag('debugging', debugging)

  if (debugging) {
    console.log('[DEBUG] Set up Sentry.')
  }
} else {
  if (debugging) {
    console.log('[DEBUG] Sentry disabled.')
  }
}
