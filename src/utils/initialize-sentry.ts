// This file should be imported once at the top of any entrypoint as:
// ```
// import './utils/initialize-sentry'
// ```
// (no "from"; this doesn't export anything). That will setup the error hooks.

// Note: KEEP DEPS HERE TO A MINIMUM. Sentry should be first thing to run.
import * as Sentry from '@sentry/node'

// Rollup will inline this as true/false
const IS_PUB = process.env['SOCKET_IS_PUBLISHED']
const ENABLE_SENTRY =
  // Enable unless explicitly disabled
  (IS_PUB && process.env['SOCKET_ENABLE_SENTRY'] !== '0') ||
  // Disable unless explicitly enabled
  (!IS_PUB && process.env['SOCKET_ENABLE_SENTRY'] === '1')

const debugging = process.env['SOCKET_CLI_DEBUG'] === '1'

if (ENABLE_SENTRY) {
  if (debugging) {
    console.log('[DEBUG] Setting up Sentry...')
  }
  Sentry.init({
    // debug: true,
    onFatalError(error: Error) {
      if (debugging) {
        console.error('[DEBUG] [Sentry onFatalError]:', error)
      }
    },
    enabled: ENABLE_SENTRY,

    dsn: 'https://66736701db8e4ffac046bd09fa6aaced@o555220.ingest.us.sentry.io/4508846967619585',
    integrations: []
  })
  Sentry.setTag('environment', 'dev') // TBD: how to determine this?
  Sentry.setTag('version', process.env['SOCKET_CLI_VERSION']) // Generated by rollup
  Sentry.setTag('debugging', debugging)
  Sentry.setTag('published', IS_PUB)

  if (debugging) {
    console.log('[DEBUG] Set up Sentry.')
  }
} else {
  if (debugging) {
    console.log('[DEBUG] Sentry disabled.')
  }
}
