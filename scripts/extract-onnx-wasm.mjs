/**
 * Extract ONNX Runtime WASM and create onnx-sync.mjs.
 * This runs during build to extract the WASM binary from onnxruntime-web
 * and generate our custom synchronous loader wrapper.
 */

import { readFileSync, writeFileSync } from 'node:fs'
import path from 'node:path'
import { fileURLToPath } from 'node:url'

const __dirname = path.dirname(fileURLToPath(import.meta.url))
const rootPath = path.join(__dirname, '..')

// Read the ONNX Runtime WASM file (use SIMD threaded variant).
const wasmFile = path.join(
  rootPath,
  'node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.wasm',
)

const wasmBinary = readFileSync(wasmFile)

// Convert to base64.
const base64Data = wasmBinary.toString('base64')

console.log(
  `✓ Extracted ${wasmBinary.length} bytes from ort-wasm-simd-threaded.wasm`,
)
console.log(`✓ Base64 size: ${base64Data.length} bytes`)

// Generate onnx-sync.mjs with inlined base64.
const onnxSyncContent = `/**
 * Synchronous ONNX Runtime using embedded WASM.
 *
 * This file is AUTO-GENERATED by scripts/extract-onnx-wasm.mjs
 * DO NOT EDIT MANUALLY - changes will be overwritten on next build.
 */

import * as ort from 'onnxruntime-web'

// Inlined base64 WASM from onnxruntime-web (extracted at build time).
const base64Wasm = '${base64Data}'

// Decode base64 to Uint8Array.
const wasmBinary = Uint8Array.from(atob(base64Wasm), c => c.charCodeAt(0))

// Configure ONNX Runtime to use our embedded WASM.
ort.env.wasm.wasmPaths = {
  'ort-wasm-simd-threaded.wasm': URL.createObjectURL(
    new Blob([wasmBinary], { type: 'application/wasm' })
  )
}

// Force WebAssembly backend with SIMD.
ort.env.wasm.numThreads = 1
ort.env.wasm.simd = true

// Export the configured ONNX Runtime.
export default ort
export const { InferenceSession, Tensor } = ort
`

const outputPath = path.join(rootPath, 'external/onnx-sync.mjs')
writeFileSync(outputPath, onnxSyncContent, 'utf-8')

console.log(`✓ Generated ${outputPath}`)
console.log(`✓ onnx-sync.mjs size: ${onnxSyncContent.length} bytes`)
