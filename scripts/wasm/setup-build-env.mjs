/**
 * Setup WASM Build Environment
 *
 * Configures optimal build settings for WASM compilation.
 *
 * OPTIMIZATIONS:
 * - sccache: Shared compilation cache (40-60% faster clean builds)
 * - Cargo parallel builds: Use all CPU cores
 * - RUSTFLAGS: Additional optimization flags
 *
 * USAGE:
 *   node scripts/wasm/setup-build-env.mjs
 *   source ~/.zshrc  # or ~/.bashrc
 *
 * Or evaluate inline:
 *   eval "$(node scripts/wasm/setup-build-env.mjs --export)"
 */

import { existsSync } from 'node:fs'
import { promises as fs } from 'node:fs'
import { homedir } from 'node:os'
import path from 'node:path'
import { execSync } from 'node:child_process'

import { logger } from '@socketsecurity/lib/logger'

const isExportMode = process.argv.includes('--export')

/**
 * Check if command exists.
 */
function commandExists(command) {
  try {
    execSync(`which ${command}`, { stdio: 'pipe' })
    return true
  } catch {
    return false
  }
}

/**
 * Get number of CPU cores.
 */
function getCpuCount() {
  try {
    const { cpus } = await import('node:os')
    return cpus().length
  } catch {
    return 4 // Default fallback
  }
}

/**
 * Check if sccache is installed.
 */
function checkSccache() {
  if (commandExists('sccache')) {
    logger.success('sccache found')
    return true
  }

  logger.warn('sccache not installed')
  logger.substep('Install for 40-60% faster clean builds:')
  logger.substep('  cargo install sccache')
  return false
}

/**
 * Setup shell configuration.
 */
async function setupShellConfig() {
  const shell = process.env.SHELL || ''
  const isZsh = shell.includes('zsh')
  const isBash = shell.includes('bash')

  const configFile = isZsh
    ? path.join(homedir(), '.zshrc')
    : isBash
      ? path.join(homedir(), '.bashrc')
      : null

  if (!configFile) {
    logger.warn('Could not detect shell (zsh or bash)')
    return null
  }

  return configFile
}

/**
 * Generate environment variables.
 */
async function generateEnvVars() {
  const hasSccache = checkSccache()
  const cpuCount = getCpuCount()
  const cacheDir = path.join(homedir(), '.cache')

  const envVars = {
    // Cargo parallel builds.
    CARGO_BUILD_JOBS: cpuCount.toString(),

    // Go cache.
    GOCACHE: path.join(cacheDir, 'go-build'),

    // Rust incremental compilation cache.
    CARGO_INCREMENTAL: '1',

    // Target directory (for consistency).
    CARGO_TARGET_DIR: 'target',
  }

  // Add sccache if available.
  if (hasSccache) {
    envVars.RUSTC_WRAPPER = 'sccache'
    envVars.SCCACHE_DIR = path.join(cacheDir, 'sccache')
  }

  return envVars
}

/**
 * Main entry point.
 */
async function main() {
  if (!isExportMode) {
    logger.step('WASM Build Environment Setup')
    logger.substep('Checking build tools and configuration\n')
  }

  const envVars = await generateEnvVars()

  if (isExportMode) {
    // Export mode: output shell commands.
    for (const [key, value] of Object.entries(envVars)) {
      console.log(`export ${key}="${value}"`)
    }
    return
  }

  // Interactive mode: show configuration.
  logger.info('Recommended environment variables:\n')
  for (const [key, value] of Object.entries(envVars)) {
    logger.substep(`${key}=${value}`)
  }

  // Check shell config.
  const configFile = await setupShellConfig()
  if (!configFile) {
    logger.info('\nAdd these to your shell configuration manually.')
    return
  }

  logger.info(`\nTo apply these settings automatically, add to ${configFile}:\n`)

  // Generate shell script snippet.
  const shellScript = [
    '# Socket CLI WASM Build Optimizations',
    '# Generated by scripts/wasm/setup-build-env.mjs',
    '',
  ]

  for (const [key, value] of Object.entries(envVars)) {
    shellScript.push(`export ${key}="${value}"`)
  }

  shellScript.push('')

  logger.substep(shellScript.join('\n'))

  // Check if already configured.
  if (existsSync(configFile)) {
    const content = await fs.readFile(configFile, 'utf-8')
    if (content.includes('Socket CLI WASM Build Optimizations')) {
      logger.success('\nAlready configured in shell config')
      return
    }
  }

  logger.info('\nTo append automatically, run:')
  logger.substep(
    `node scripts/wasm/setup-build-env.mjs --export >> ${configFile}`,
  )
  logger.substep(`source ${configFile}`)
}

main().catch(e => {
  if (!isExportMode) {
    logger.error('Setup failed:', e)
  }
  process.exit(1)
})
