/**
 * Unified WASM extraction script.
 * Extracts all WASM dependencies and generates sync loaders.
 *
 * DRY principle: One script for all WASM processing.
 */

import { mkdirSync, readFileSync, writeFileSync } from 'node:fs'
import path from 'node:path'
import { fileURLToPath } from 'node:url'

const __dirname = path.dirname(fileURLToPath(import.meta.url))
const rootPath = path.join(__dirname, '..')

// WASM modules to process.
const WASM_MODULES = [
  {
    name: 'yoga',
    description: 'Yoga layout engine',
    source: 'node_modules/yoga-layout/dist/binaries/yoga-wasm-base64-esm.js',
    type: 'extract-base64',
    pattern: /H="data:application\/octet-stream;base64,([^"]+)"/,
    wrapper: 'yoga-layout',
    imports: [
      `import loadYogaImpl from 'yoga-layout/dist/binaries/yoga-wasm-base64-esm.js'`,
      `import wrapAssembly from 'yoga-layout/dist/src/wrapAssembly.js'`,
    ],
    instantiate: `
// Capture the Module object from the instantiateWasm context.
let moduleObj = null

// Force synchronous initialization by providing instantiateWasm.
loadYogaImpl({
  wasmBinary,
  instantiateWasm(imports, successCallback) {
    // 'this' is the actual Module object that gets populated with Node/Config classes.
    moduleObj = this

    const module = new WebAssembly.Module(wasmBinary)
    const instance = new WebAssembly.Instance(module, imports)

    // successCallback populates 'this' with embind classes.
    successCallback(instance, module)

    return instance.exports
  }
})

// Wrap the Module object to add convenience methods like Node.create().
const yoga = wrapAssembly(moduleObj)

// Export the wrapped yoga object with all enums and convenience methods.
export default yoga
`,
  },
  {
    name: 'onnx',
    description: 'ONNX Runtime for ML inference',
    source: 'node_modules/@xenova/transformers/dist/ort-wasm-simd.wasm',
    type: 'binary',
    wrapper: 'onnxruntime-web',
    imports: [`import * as ort from 'onnxruntime-web'`],
    instantiate: `
// Configure ONNX Runtime to use our embedded WASM.
ort.env.wasm.wasmPaths = {
  'ort-wasm-simd.wasm': URL.createObjectURL(
    new Blob([wasmBinary], { type: 'application/wasm' })
  )
}

// Force WebAssembly backend with SIMD.
ort.env.wasm.numThreads = 1
ort.env.wasm.simd = true

// Export the configured ONNX Runtime.
export default ort
export const { InferenceSession, Tensor } = ort
`,
  },
]

console.log('🔧 Extracting all WASM modules...\n')

// Create output directory.
const outputDir = path.join(rootPath, 'external')
mkdirSync(outputDir, { recursive: true })

// Process each WASM module.
for (const module of WASM_MODULES) {
  console.log(`📦 Processing ${module.name}...`)

  const sourcePath = path.join(rootPath, module.source)

  let base64Data

  if (module.type === 'extract-base64') {
    // Extract base64 from existing file.
    const content = readFileSync(sourcePath, 'utf-8')
    const match = content.match(module.pattern)

    if (!match) {
      console.error(`  ❌ Could not find base64 data in ${module.source}`)
      continue
    }

    base64Data = match[1]
  } else if (module.type === 'binary') {
    // Read binary and convert to base64.
    const binary = readFileSync(sourcePath)
    base64Data = binary.toString('base64')

    console.log(`  ✓ Read ${binary.length} bytes`)
  }

  console.log(`  ✓ Base64 size: ${base64Data.length} bytes`)

  // Generate sync loader.
  const loaderContent = `/**
 * Synchronous ${module.description} using embedded WASM.
 *
 * This file is AUTO-GENERATED by scripts/extract-all-wasm.mjs
 * DO NOT EDIT MANUALLY - changes will be overwritten on next build.
 */

${module.imports.join('\n')}

// Inlined base64 WASM from ${module.wrapper} (extracted at build time).
const base64Wasm = '${base64Data}'

// Decode base64 to Uint8Array.
const wasmBinary = Uint8Array.from(atob(base64Wasm), c => c.charCodeAt(0))

${module.instantiate}
`

  const outputPath = path.join(outputDir, `${module.name}-sync.mjs`)
  writeFileSync(outputPath, loaderContent, 'utf-8')

  console.log(`  ✓ Generated ${outputPath}`)
  console.log(`  ✓ Total size: ${loaderContent.length} bytes\n`)
}

console.log('✓ All WASM modules extracted successfully!')
