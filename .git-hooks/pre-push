#!/bin/bash
# Socket Security Pre-push Hook
# Final security check before pushing to remote.

set -e

# Colors for output.
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m'

echo "${GREEN}Running final security validation before push...${NC}"

# Allowed public API key (used in socket-lib).
ALLOWED_PUBLIC_KEY="sktsec_t_--RAN5U4ivauy4w37-6aoKyYPDt5ZbaT5JBVMqiwKo_api"

# Get the remote name and URL.
remote="$1"
url="$2"

# Read stdin for refs being pushed.
while read local_ref local_sha remote_ref remote_sha; do
  # Get the range of commits being pushed.
  if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
    # New branch - check all commits.
    range="$local_sha"
  else
    # Existing branch - check new commits.
    range="$remote_sha..$local_sha"
  fi

  # Get all files changed in these commits.
  CHANGED_FILES=$(git diff --name-only "$range" 2>/dev/null || echo "")

  if [ -z "$CHANGED_FILES" ]; then
    continue
  fi

  ERRORS=0

  # Check for sensitive files.
  if echo "$CHANGED_FILES" | grep -qE '^\.env(\.local)?$'; then
    echo "${RED}✗ BLOCKED: Attempting to push .env file!${NC}"
    echo "Files: $(echo "$CHANGED_FILES" | grep -E '^\.env(\.local)?$')"
    ERRORS=$((ERRORS + 1))
  fi

  # Check for .DS_Store.
  if echo "$CHANGED_FILES" | grep -q '\.DS_Store'; then
    echo "${YELLOW}⚠ WARNING: .DS_Store file in push${NC}"
    echo "Files: $(echo "$CHANGED_FILES" | grep '\.DS_Store')"
  fi

  # Sample files for API keys (only check files that exist).
  for file in $CHANGED_FILES; do
    if [ -f "$file" ] && [ ! -d "$file" ]; then
      # Skip test files.
      if echo "$file" | grep -qE '\.(test|spec)\.|/test/|/tests/|fixtures/|\.example$'; then
        continue
      fi

      # Check for Socket API keys.
      if grep -E 'sktsec_[a-zA-Z0-9_-]{40,}' "$file" 2>/dev/null | grep -v "$ALLOWED_PUBLIC_KEY" | grep -v 'your_api_key_here' | grep -v 'fake-token' | grep -v 'test-token' | grep -q .; then
        echo "${RED}✗ BLOCKED: Real API key detected in push!${NC}"
        echo "File: $file"
        echo "Line(s):"
        grep -n 'sktsec_' "$file" | grep -v "$ALLOWED_PUBLIC_KEY" | grep -v 'your_api_key_here' | grep -v 'fake-token' | grep -v 'test-token' | head -3
        ERRORS=$((ERRORS + 1))
      fi
    fi
  done

  if [ $ERRORS -gt 0 ]; then
    echo ""
    echo "${RED}✗ Push blocked by security validation!${NC}"
    echo "Remove sensitive data from your commits before pushing."
    echo ""
    echo "To fix:"
    echo "  1. Remove sensitive data from files"
    echo "  2. Amend or rebase your commits"
    echo "  3. Push again"
    exit 1
  fi
done

echo "${GREEN}✓ Security validation passed!${NC}"
exit 0
