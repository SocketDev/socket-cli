/**
 * Extract onnxruntime-web and create onnx-sync.mjs
 * This runs during build to create a wrapper around onnxruntime-web
 * for use in the MiniLM semantic inference engine.
 *
 * Idempotent: Skips regeneration if source hasn't changed (supports CI caching).
 */

import { readFileSync, writeFileSync } from 'node:fs'
import path from 'node:path'
import { fileURLToPath } from 'node:url'

import {
  ensureOutputDir,
  generateHashComment,
  shouldExtract,
} from '@socketsecurity/build-infra/lib/extraction-cache'
import { logger } from '@socketsecurity/lib/logger'

const __dirname = path.dirname(fileURLToPath(import.meta.url))
const rootPath = path.join(__dirname, '..')
const outputPath = path.join(rootPath, 'build/onnx-sync.mjs')

// Get onnxruntime-web package.json path for version tracking.
const onnxPackageJsonPath = path.join(
  rootPath,
  'node_modules/onnxruntime-web/package.json',
)

// Check if extraction needed (hash-based caching).
if (!await shouldExtract({
  sourcePaths: onnxPackageJsonPath,
  outputPath,
  validateOutput: (content) =>
    content.includes('onnxruntime-web') &&
    content.includes('InferenceSession'),
})) {
  process.exit(0)
}

// Compute source hash for cache validation.
const sourceHashComment = await generateHashComment(onnxPackageJsonPath)

// Generate onnx-sync.mjs as a simple re-export of onnxruntime-web.
const onnxSyncContent = `/**
 * ONNX Runtime wrapper for MiniLM inference.
 *
 * This file is AUTO-GENERATED by scripts/extract-onnx-runtime.mjs
 * DO NOT EDIT MANUALLY - changes will be overwritten on next build.
 *
 * Re-exports onnxruntime-web for use in MiniLM embedding pipeline.
 *
 * ${sourceHashComment}
 */

import ort from 'onnxruntime-web'
import { logger } from '@socketsecurity/lib/logger'
import colors from 'yoctocolors-cjs'

export const InferenceSession = ort.InferenceSession
export const Tensor = ort.Tensor

export default ort
`

ensureOutputDir(outputPath)
writeFileSync(outputPath, onnxSyncContent, 'utf-8')

logger.log(`✓ Generated ${outputPath}`)
logger.log(`✓ onnx-sync.mjs size: ${onnxSyncContent.length} bytes`)
