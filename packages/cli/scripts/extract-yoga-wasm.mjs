/**
 * Extract yoga-layout WASM base64 and create yoga-sync.mjs
 * This runs during build to extract the WASM binary from yoga-layout
 * and generate our custom synchronous loader wrapper.
 *
 * Idempotent: Skips regeneration if source hasn't changed (supports CI caching).
 */

import { readFileSync, writeFileSync } from 'node:fs'
import path from 'node:path'
import { fileURLToPath } from 'node:url'

import {
  ensureOutputDir,
  generateHashComment,
  shouldExtract,
} from '@socketsecurity/build-infra/lib/extraction-cache'
import { logger } from '@socketsecurity/lib/logger'

const __dirname = path.dirname(fileURLToPath(import.meta.url))
const rootPath = path.join(__dirname, '..')

const outputPath = path.join(rootPath, 'build/yoga-sync.mjs')

// Source files from custom yoga-layout package.
const yogaPackageRoot = path.join(rootPath, '../yoga-layout')
const yogaWasmFile = path.join(yogaPackageRoot, 'build/wasm/yoga.wasm')
const yogaJsFile = path.join(yogaPackageRoot, 'build/wasm/yoga.js')

// Check if extraction needed (hash both files).
if (
  !(await shouldExtract({
    sourcePaths: [yogaWasmFile, yogaJsFile],
    outputPath,
    validateOutput: content =>
      content.includes('yoga-layout') && content.includes('WebAssembly'),
  }))
) {
  process.exit(0)
}

// Read WASM binary and convert to base64.
const wasmBinary = readFileSync(yogaWasmFile)
const base64Data = wasmBinary.toString('base64')

// Read our custom Emscripten loader (generated by our build).
const yogaJsContent = readFileSync(yogaJsFile, 'utf-8')

// Compute source hash for cache validation.
const sourceHashComment = await generateHashComment([yogaWasmFile, yogaJsFile])

logger.log(
  `✓ Extracted ${wasmBinary.length} bytes of WASM data from custom yoga-layout`,
)

// Generate yoga-sync.mjs using OUR custom loader with OUR custom WASM.
const yogaSyncContent = `/**
 * Synchronous yoga-layout with embedded WASM binary.
 *
 * This file is AUTO-GENERATED by scripts/extract-yoga-wasm.mjs
 * DO NOT EDIT MANUALLY - changes will be overwritten on next build.
 *
 * Uses custom-built yoga-layout with Emscripten loader.
 * Built with WASM_ASYNC_COMPILATION=0 for synchronous instantiation.
 *
 * ${sourceHashComment}
 */

// Inlined base64 WASM from custom yoga-layout (extracted at build time).
const base64Wasm = '${base64Data}'

// Decode base64 to Uint8Array.
const wasmBinary = Uint8Array.from(atob(base64Wasm), c => c.charCodeAt(0))

// Inlined Emscripten loader from custom yoga-layout build (no export statement).
${yogaJsContent}

// Synchronously initialize yoga with embedded WASM.
const yoga = Module({
  wasmBinary,
  instantiateWasm(imports, successCallback) {
    // Synchronously instantiate WASM module.
    const module = new WebAssembly.Module(wasmBinary)
    const instance = new WebAssembly.Instance(module, imports)
    successCallback(instance, module)
    return instance.exports
  }
})

export default yoga
`

ensureOutputDir(outputPath)
writeFileSync(outputPath, yogaSyncContent, 'utf-8')

logger.log(`✓ Generated ${outputPath}`)
logger.log(`✓ yoga-sync.mjs size: ${yogaSyncContent.length} bytes`)
