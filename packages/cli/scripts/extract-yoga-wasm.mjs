/**
 * Extract yoga-layout WASM base64 and create yoga-sync.mjs
 * This runs during build to extract the WASM binary from yoga-layout
 * and generate our custom synchronous loader wrapper.
 *
 * Idempotent: Skips regeneration if file already exists (supports CI caching).
 */

import { existsSync, readFileSync, writeFileSync } from 'node:fs'
import path from 'node:path'
import { fileURLToPath } from 'node:url'

const __dirname = path.dirname(fileURLToPath(import.meta.url))
const rootPath = path.join(__dirname, '..')

const outputPath = path.join(rootPath, 'external/yoga-sync.mjs')

// Check if file already exists (supports CI cache).
if (existsSync(outputPath)) {
  try {
    const existing = readFileSync(outputPath, 'utf-8')
    // Verify it's the expected content (not corrupted).
    if (
      existing.includes('yoga-layout') &&
      existing.includes('instantiateWasm')
    ) {
      console.log(`✓ Using cached ${outputPath}`)
      process.exit(0)
    }
  } catch {}
  // Fall through to regenerate if verification failed.
}

// Read the Emscripten-generated file.
const emscriptenFile = path.join(
  rootPath,
  'node_modules/yoga-layout/dist/binaries/yoga-wasm-base64-esm.js',
)

const content = readFileSync(emscriptenFile, 'utf-8')

// Extract base64 WASM data.
// Pattern: H="data:application/octet-stream;base64,<BASE64DATA>"
const match = content.match(/H="data:application\/octet-stream;base64,([^"]+)"/)

if (!match) {
  throw new Error('Could not find WASM base64 data in yoga-layout binary file')
}

const base64Data = match[1]

console.log(
  `✓ Extracted ${base64Data.length} bytes of base64 WASM data from yoga-layout`,
)

// Generate yoga-sync.mjs with inlined base64.
const yogaSyncContent = `/**
 * Synchronous yoga-layout using the REAL Emscripten loader.
 *
 * This file is AUTO-GENERATED by scripts/extract-yoga-wasm.mjs
 * DO NOT EDIT MANUALLY - changes will be overwritten on next build.
 */

// Import the REAL Emscripten-generated loader and wrapper.
import loadYogaImpl from 'yoga-layout/dist/binaries/yoga-wasm-base64-esm.js'
import wrapAssembly from 'yoga-layout/dist/src/wrapAssembly.js'

// Inlined base64 WASM from yoga-layout (extracted at build time).
const base64Wasm = '${base64Data}'

// Decode base64 to Uint8Array.
const wasmBinary = Uint8Array.from(atob(base64Wasm), c => c.charCodeAt(0))

// Capture the Module object from the instantiateWasm context.
let moduleObj = null

// Force synchronous initialization by providing instantiateWasm.
loadYogaImpl({
  wasmBinary,
  instantiateWasm(imports, successCallback) {
    // 'this' is the actual Module object that gets populated with Node/Config classes.
    moduleObj = this

    const module = new WebAssembly.Module(wasmBinary)
    const instance = new WebAssembly.Instance(module, imports)

    // successCallback populates 'this' with embind classes.
    successCallback(instance, module)

    return instance.exports
  }
})

// Wrap the Module object to add convenience methods like Node.create().
const yoga = wrapAssembly(moduleObj)

// Export the wrapped yoga object with all enums and convenience methods.
export default yoga
`

writeFileSync(outputPath, yogaSyncContent, 'utf-8')

console.log(`✓ Generated ${outputPath}`)
console.log(`✓ yoga-sync.mjs size: ${yogaSyncContent.length} bytes`)
