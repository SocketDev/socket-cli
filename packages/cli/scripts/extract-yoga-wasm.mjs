/**
 * Extract yoga-layout WASM base64 and create yoga-sync.mjs
 * This runs during build to extract the WASM binary from yoga-layout
 * and generate our custom synchronous loader wrapper.
 *
 * Idempotent: Skips regeneration if source hasn't changed (supports CI caching).
 */

import { readFileSync, writeFileSync } from 'node:fs'
import path from 'node:path'
import { fileURLToPath } from 'node:url'

import {
  ensureOutputDir,
  generateHashComment,
  shouldExtract,
} from '@socketsecurity/build-infra/lib/extraction-cache'
import { logger } from '@socketsecurity/lib/logger'

const __dirname = path.dirname(fileURLToPath(import.meta.url))
const rootPath = path.join(__dirname, '..')

const outputPath = path.join(rootPath, 'build/yoga-sync.mjs')

// All source files that contribute to the build.
const emscriptenFile = path.join(
  rootPath,
  'node_modules/yoga-layout/dist/binaries/yoga-wasm-base64-esm.js',
)
const wrapAssemblyFile = path.join(
  rootPath,
  'node_modules/yoga-layout/dist/src/wrapAssembly.js',
)

// Check if extraction needed (hash ALL source files).
if (!await shouldExtract({
  sourcePaths: [emscriptenFile, wrapAssemblyFile],
  outputPath,
  validateOutput: (content) =>
    content.includes('yoga-layout') &&
    content.includes('instantiateWasm'),
})) {
  process.exit(0)
}

const content = readFileSync(emscriptenFile, 'utf-8')

// Compute source hash for cache validation (hashes all source files).
const sourceHashComment = await generateHashComment([
  emscriptenFile,
  wrapAssemblyFile,
])

// Extract base64 WASM data.
// Pattern: H="data:application/octet-stream;base64,<BASE64DATA>"
const match = content.match(/H="data:application\/octet-stream;base64,([^"]+)"/)

if (!match) {
  throw new Error('Could not find WASM base64 data in yoga-layout binary file')
}

const base64Data = match[1]

logger.log(
  `✓ Extracted ${base64Data.length} bytes of base64 WASM data from yoga-layout`,
)

// Generate yoga-sync.mjs with inlined base64.
const yogaSyncContent = `/**
 * Synchronous yoga-layout using the REAL Emscripten loader.
 *
 * This file is AUTO-GENERATED by scripts/extract-yoga-wasm.mjs
 * DO NOT EDIT MANUALLY - changes will be overwritten on next build.
 *
 * ${sourceHashComment}
 */

// Import the REAL Emscripten-generated loader and wrapper.
import loadYogaImpl from 'yoga-layout/dist/binaries/yoga-wasm-base64-esm.js'
import wrapAssembly from 'yoga-layout/dist/src/wrapAssembly.js'
import { logger } from '@socketsecurity/lib/logger'
import colors from 'yoctocolors-cjs'

// Inlined base64 WASM from yoga-layout (extracted at build time).
const base64Wasm = '${base64Data}'

// Decode base64 to Uint8Array.
const wasmBinary = Uint8Array.from(atob(base64Wasm), c => c.charCodeAt(0))

// Capture the Module object from the instantiateWasm context.
let moduleObj = null

// Force synchronous initialization by providing instantiateWasm.
loadYogaImpl({
  wasmBinary,
  instantiateWasm(imports, successCallback) {
    // 'this' is the actual Module object that gets populated with Node/Config classes.
    moduleObj = this

    const module = new WebAssembly.Module(wasmBinary)
    const instance = new WebAssembly.Instance(module, imports)

    // successCallback populates 'this' with embind classes.
    successCallback(instance, module)

    return instance.exports
  }
})

// Wrap the Module object to add convenience methods like Node.create().
const yoga = wrapAssembly(moduleObj)

// Export the wrapped yoga object with all enums and convenience methods.
export default yoga
`

ensureOutputDir(outputPath)
writeFileSync(outputPath, yogaSyncContent, 'utf-8')

logger.log(`✓ Generated ${outputPath}`)
logger.log(`✓ yoga-sync.mjs size: ${yogaSyncContent.length} bytes`)
