name: 🌊 Build SEA Node Binaries

on:
  workflow_call:
    inputs:
      force:
        description: 'Force rebuild (ignore cache)'
        required: false
        type: boolean
        default: false
      build-linux:
        description: 'Build Linux SEA binaries'
        required: false
        type: boolean
        default: true
      build-macos:
        description: 'Build macOS SEA binaries'
        required: false
        type: boolean
        default: true
      build-windows:
        description: 'Build Windows SEA binaries'
        required: false
        type: boolean
        default: true
      build-yoga:
        description: 'Build Yoga Layout WASM'
        required: false
        type: boolean
        default: true
      build-models:
        description: 'Build AI Models'
        required: false
        type: boolean
        default: true
      build-onnx:
        description: 'Build ONNX Runtime WASM'
        required: false
        type: boolean
        default: true
  workflow_dispatch:
    inputs:
      force:
        description: 'Force rebuild (ignore cache)'
        required: false
        type: boolean
        default: false
      build-linux:
        description: 'Build Linux SEA binaries'
        required: false
        type: boolean
        default: true
      build-macos:
        description: 'Build macOS SEA binaries'
        required: false
        type: boolean
        default: true
      build-windows:
        description: 'Build Windows SEA binaries'
        required: false
        type: boolean
        default: true
      build-yoga:
        description: 'Build Yoga Layout WASM'
        required: false
        type: boolean
        default: true
      build-models:
        description: 'Build AI Models'
        required: false
        type: boolean
        default: true
      build-onnx:
        description: 'Build ONNX Runtime WASM'
        required: false
        type: boolean
        default: true
  # Removed push/pull_request triggers to prevent automatic builds.
  # Run manually via workflow_dispatch or via workflow_call from build-socketbin.yml.

permissions:
  contents: read

concurrency:
  group: build-sea-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-deps:
    name: 📦 Build Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      deps-hash: ${{ steps.deps-cache-key.outputs.hash }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: 22

      - name: Setup pnpm
        uses: pnpm/action-setup@9fd676a19091d4595eefd76e4bd31c97133911f1 # v4.2.0
        with:
          version: ^10.16.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate build-deps cache key
        id: deps-cache-key
        shell: bash
        run: |
          # Include pnpm-lock.yaml to detect dependency changes (e.g., @socketsecurity/lib updates).
          HASH=$(find packages/bootstrap packages/socket -type f \( -name "*.mts" -o -name "*.ts" -o -name "*.mjs" -o -name "*.js" -o -name "*.json" \) ! -path "*/node_modules/*" ! -path "*/dist/*" ! -path "*/build/*" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1)
          LOCK_HASH=$(sha256sum pnpm-lock.yaml | cut -d' ' -f1)
          COMBINED_HASH=$(echo "$HASH-$LOCK_HASH" | sha256sum | cut -d' ' -f1)
          echo "hash=$COMBINED_HASH" >> $GITHUB_OUTPUT

      - name: Restore build-deps cache
        id: deps-cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            packages/bootstrap/dist/
            packages/socket/dist/
          key: build-deps-sea-${{ steps.deps-cache-key.outputs.hash }}
          restore-keys: build-deps-sea-

      - name: Build bootstrap package
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: pnpm --filter @socketsecurity/bootstrap run build

      - name: Build socket package bootstrap
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: pnpm --filter socket run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: build-deps-${{ github.sha }}
          path: packages/
          retention-days: 1

  build-sea:
    name: 🌊 Build SEA binary - ${{ matrix.platform }}-${{ matrix.arch }}
    needs: build-deps
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        include:
          # Linux builds - use x64 runner to build both x64 and arm64.
          - runner: ubuntu-latest
            os: linux
            platform: linux
            arch: x64
          - runner: ubuntu-latest
            os: linux
            platform: linux
            arch: arm64

          # Alpine Linux builds - use musl binaries from unofficial-builds.nodejs.org.
          - runner: ubuntu-latest
            os: linux
            platform: alpine
            arch: x64
          - runner: ubuntu-latest
            os: linux
            platform: alpine
            arch: arm64

          # macOS builds - use arm64 runner to build both x64 and arm64.
          - runner: macos-latest-large
            os: darwin
            platform: darwin
            arch: x64
          - runner: macos-latest-large
            os: darwin
            platform: darwin
            arch: arm64

          # Windows builds - use x64 runner to build both x64 and arm64.
          - runner: windows-latest
            os: windows
            platform: win32
            arch: x64
          - runner: windows-latest
            os: windows
            platform: win32
            arch: arm64

    steps:
      - name: Check if platform is enabled
        id: check-platform
        shell: bash
        run: |
          SHOULD_RUN="false"
          if [ "${{ matrix.platform }}" = "linux" ] || [ "${{ matrix.platform }}" = "alpine" ]; then
            if [ "${{ inputs.build-linux }}" != "false" ]; then
              SHOULD_RUN="true"
            fi
          elif [ "${{ matrix.platform }}" = "darwin" ]; then
            if [ "${{ inputs.build-macos }}" != "false" ]; then
              SHOULD_RUN="true"
            fi
          elif [ "${{ matrix.platform }}" = "win32" ]; then
            if [ "${{ inputs.build-windows }}" != "false" ]; then
              SHOULD_RUN="true"
            fi
          fi
          echo "should-run=$SHOULD_RUN" >> $GITHUB_OUTPUT
          if [ "$SHOULD_RUN" = "true" ]; then
            echo "✓ Building ${{ matrix.platform }}-${{ matrix.arch }}"
          else
            echo "⊘ Skipping ${{ matrix.platform }}-${{ matrix.arch }} (disabled by inputs)"
          fi

      - name: Checkout
        if: steps.check-platform.outputs.should-run == 'true'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download build artifacts
        if: steps.check-platform.outputs.should-run == 'true'
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: build-deps-${{ github.sha }}
          path: packages/

      - name: Verify build artifacts
        if: steps.check-platform.outputs.should-run == 'true'
        shell: bash
        run: |
          echo "=== Verifying downloaded build artifacts ==="
          echo ""
          echo "Checking for required files:"
          ls -lh packages/bootstrap/dist/bootstrap-npm.js && echo "✓ bootstrap-npm.js present" || (echo "❌ bootstrap-npm.js missing" && exit 1)
          ls -lh packages/socket/dist/bootstrap.js && echo "✓ socket bootstrap.js present" || (echo "❌ socket bootstrap.js missing" && exit 1)
          echo ""
          echo "✓ Bootstrap artifacts verified"

      - name: Setup Node.js
        if: steps.check-platform.outputs.should-run == 'true'
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: 22

      - name: Setup pnpm
        if: steps.check-platform.outputs.should-run == 'true'
        uses: pnpm/action-setup@9fd676a19091d4595eefd76e4bd31c97133911f1 # v4.2.0
        with:
          version: ^10.16.0

      - name: Install dependencies
        if: steps.check-platform.outputs.should-run == 'true'
        run: pnpm install --frozen-lockfile

      - name: Generate WASM cache keys
        if: steps.check-platform.outputs.should-run == 'true'
        id: wasm-cache-keys
        shell: bash
        run: |
          YOGA_HASH=$(find packages/yoga-layout -type f \( -name "*.cpp" -o -name "*.h" -o -name "*.mjs" -o -name "CMakeLists.txt" \) | sort | xargs sha256sum | sha256sum | cut -d' ' -f1)
          echo "yoga-hash=$YOGA_HASH" >> $GITHUB_OUTPUT

          AI_HASH=$(find packages/socketbin-cli-ai -type f \( -name "*.mjs" -o -name "*.ts" \) | sort | xargs sha256sum | sha256sum | cut -d' ' -f1)
          echo "ai-hash=$AI_HASH" >> $GITHUB_OUTPUT

          # ONNX_HASH=$(find packages/onnxruntime -type f \( -name "*.mjs" -o -name "*.patch" \) | sort | xargs sha256sum | sha256sum | cut -d' ' -f1)
          # echo "onnx-hash=$ONNX_HASH" >> $GITHUB_OUTPUT

      - name: Restore Yoga Layout WASM cache
        if: steps.check-platform.outputs.should-run == 'true'
        id: yoga-cache
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: packages/yoga-layout/build/wasm
          key: yoga-wasm-${{ steps.wasm-cache-keys.outputs.yoga-hash }}
          restore-keys: yoga-wasm-
          enableCrossOsArchive: true

      - name: Restore AI models cache
        if: steps.check-platform.outputs.should-run == 'true'
        id: ai-cache
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: packages/socketbin-cli-ai/dist
          key: ai-models-${{ steps.wasm-cache-keys.outputs.ai-hash }}
          restore-keys: ai-models-
          enableCrossOsArchive: true

      # - name: Restore ONNX Runtime cache
      #   id: onnx-cache
      #   uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      #   with:
      #     path: packages/onnxruntime/dist
      #     key: onnx-runtime-${{ steps.wasm-cache-keys.outputs.onnx-hash }}
      #     restore-keys: onnx-runtime-
      #     enableCrossOsArchive: true

      - name: Verify Yoga Layout cache
        if: steps.check-platform.outputs.should-run == 'true'
        id: yoga-cache-valid
        shell: bash
        run: |
          echo "=== Yoga Layout Cache Verification ==="
          echo "Cache restore result: ${{ steps.yoga-cache.outputs.cache-hit }}"
          echo "Cache key used: yoga-wasm-${{ steps.wasm-cache-keys.outputs.yoga-hash }}"
          echo "Checking for files..."
          ls -lah packages/yoga-layout/build/wasm/ 2>&1 || echo "Directory does not exist"
          echo ""

          if [ -f "packages/yoga-layout/build/wasm/yoga.wasm" ] && [ -f "packages/yoga-layout/build/wasm/yoga.js" ]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "✓ Yoga Layout cache valid"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "✗ Yoga Layout cache invalid or missing"
            echo "Missing files - will trigger rebuild"
          fi

      - name: Verify AI models cache
        if: steps.check-platform.outputs.should-run == 'true'
        id: ai-cache-valid
        shell: bash
        run: |
          if [ -f "packages/socketbin-cli-ai/dist/ai.bz" ] && [ -f "packages/socketbin-cli-ai/dist/ai.js" ]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "✓ AI models cache valid"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "✗ AI models cache invalid or missing"
          fi

      #       - name: Verify ONNX Runtime cache
      #         id: onnx-cache-valid
      #         shell: bash
      #         run: |
      #           if [ -f "packages/onnxruntime/dist/onnxruntime-web.wasm" ]; then
      #             echo "valid=true" >> $GITHUB_OUTPUT
      #             echo "✓ ONNX Runtime cache valid"
      #           else
      #             echo "valid=false" >> $GITHUB_OUTPUT
      #             echo "✗ ONNX Runtime cache invalid or missing"
      #           fi

      - name: Check WASM cache requirements (Windows)
        if: steps.check-platform.outputs.should-run == 'true' && matrix.os == 'windows' && (steps.yoga-cache-valid.outputs.valid != 'true' || steps.ai-cache-valid.outputs.valid != 'true')
        run: |
          echo "::error::WASM assets not cached for Windows build. Run build-wasm.yml workflow first to prime the cache."
          echo "Windows builds require pre-cached WASM assets due to network reliability issues."
          exit 1

      - name: Setup Python for WASM builds
        if: steps.check-platform.outputs.should-run == 'true' && (steps.yoga-cache-valid.outputs.valid != 'true' || steps.ai-cache-valid.outputs.valid != 'true')
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.11'

      - name: Cache Emscripten SDK
        if: steps.check-platform.outputs.should-run == 'true' && steps.yoga-cache-valid.outputs.valid != 'true'
        id: emsdk-cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: emsdk
          key: emsdk-${{ runner.os }}-latest
          restore-keys: emsdk-${{ runner.os }}-

      - name: Cache pip packages
        if: steps.check-platform.outputs.should-run == 'true' && steps.ai-cache-valid.outputs.valid != 'true'
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-py3.11-${{ hashFiles('**/requirements*.txt') }}-onnx-torch
          restore-keys: |
            pip-${{ runner.os }}-py3.11-
            pip-${{ runner.os }}-

      - name: Build WASM assets on cache miss
        if: steps.check-platform.outputs.should-run == 'true' && (steps.yoga-cache-valid.outputs.valid != 'true' || steps.ai-cache-valid.outputs.valid != 'true')
        shell: bash
        run: |
          echo "⚠️  WASM cache miss detected - building from source"
          echo "This will take 30-60 minutes. Consider running build-wasm.yml workflow to prime cache."
          echo ""
          echo "Cache status:"
          echo "  Yoga Layout: ${{ steps.yoga-cache-valid.outputs.valid == 'true' && '✓ cached' || '✗ missing' }}"
          echo "  AI Models: ${{ steps.ai-cache-valid.outputs.valid == 'true' && '✓ cached' || '✗ missing' }}"
          #           echo "  ONNX Runtime: ${{ steps.onnx-cache-valid.outputs.valid == 'true' && '✓ cached' || '✗ missing' }}"
          echo ""

          # Install Emscripten if needed for Yoga.
          if [ "${{ steps.yoga-cache-valid.outputs.valid }}" != "true" ]; then
            if [ "${{ steps.emsdk-cache.outputs.cache-hit }}" != "true" ]; then
              echo "::group::Installing Emscripten"
              git clone https://github.com/emscripten-core/emsdk.git
              cd emsdk
              ./emsdk install latest
              ./emsdk activate latest
              cd ..
              echo "::endgroup::"
            else
              echo "::group::Activating Emscripten (from cache)"
              cd emsdk
              ./emsdk activate latest
              cd ..
              echo "::endgroup::"
            fi

            # Source emsdk environment
            cd emsdk
            if [ "$RUNNER_OS" = "Windows" ]; then
              # On Windows with Git Bash, we need to explicitly set PATH
              source ./emsdk_env.sh
              # Also add upstream/bin to PATH for wasm-opt
              export PATH="$(pwd)/upstream/bin:$PATH"
            else
              source ./emsdk_env.sh
            fi
            cd ..
          fi

          # Install Python deps if needed for AI models.
          if [ "${{ steps.ai-cache-valid.outputs.valid }}" != "true" ]; then
            echo "::group::Installing Python dependencies"
            python3 -m pip install --upgrade pip
            python3 -m pip install transformers torch "optimum[onnxruntime]" "onnxruntime>=1.21.0"
            echo "::endgroup::"
          fi

          # Build missing WASM assets.
          if [ "${{ steps.yoga-cache-valid.outputs.valid }}" != "true" ]; then
            echo "::group::Building Yoga Layout WASM"
            if [ "${{ inputs.force }}" = "true" ]; then
              pnpm --filter @socketsecurity/yoga-layout run build -- --force
            else
              pnpm --filter @socketsecurity/yoga-layout run build
            fi
            echo "::endgroup::"
          fi

          if [ "${{ steps.ai-cache-valid.outputs.valid }}" != "true" ]; then
            echo "::group::Building AI models (10-15 minutes)"
            if [ "${{ inputs.force }}" = "true" ]; then
              pnpm --filter @socketbin/cli-ai run build -- --force
            else
              pnpm --filter @socketbin/cli-ai run build
            fi
            echo "::endgroup::"
          fi

          #           if [ "${{ steps.onnx-cache-valid.outputs.valid }}" != "true" ]; then
          #             echo "::group::Building ONNX Runtime (20-30 minutes)"
          #             if [ "${{ inputs.force }}" = "true" ]; then
          #               pnpm --filter @socketsecurity/onnxruntime run build -- --force
          #             else
          #               pnpm --filter @socketsecurity/onnxruntime run build
          #             fi
          #             echo "::endgroup::"
          #           fi

          echo "✓ WASM assets built successfully"

      - name: Generate SEA build cache key
        if: steps.check-platform.outputs.should-run == 'true'
        id: sea-cache-key
        shell: bash
        run: |
          SEA_HASH=$(find packages/node-sea-builder packages/cli/src -type f \( -name "*.mts" -o -name "*.ts" -o -name "*.mjs" -o -name "*.js" \) | sort | xargs sha256sum | sha256sum | cut -d' ' -f1)
          # Include bootstrap/socket/cli dependencies in cache key to invalidate when they change.
          COMBINED_HASH=$(echo "$SEA_HASH-${{ needs.build-deps.outputs.deps-hash }}" | sha256sum | cut -d' ' -f1)
          echo "hash=$COMBINED_HASH" >> $GITHUB_OUTPUT

      - name: Restore SEA binary cache
        if: steps.check-platform.outputs.should-run == 'true' && inputs.force != true
        id: sea-cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: packages/node-sea-builder/dist/sea/
          key: node-sea-${{ matrix.platform }}-${{ matrix.arch }}-${{ steps.sea-cache-key.outputs.hash }}
          restore-keys: node-sea-${{ matrix.platform }}-${{ matrix.arch }}-

      - name: Verify WASM assets before CLI build
        if: steps.check-platform.outputs.should-run == 'true' && (steps.sea-cache.outputs.cache-hit != 'true' || inputs.force)
        shell: bash
        run: |
          echo "=== Checking WASM asset availability ==="
          echo "Yoga Layout:"
          ls -lh packages/yoga-layout/build/wasm/ 2>/dev/null || echo "  ❌ Directory not found"
          echo ""
          echo "AI Models:"
          ls -lh packages/socketbin-cli-ai/dist/ 2>/dev/null || echo "  ❌ Directory not found"
          echo ""
          #           echo "ONNX Runtime:"
          #           ls -lh packages/onnxruntime/dist/ 2>/dev/null || echo "  ❌ Directory not found"
          echo ""

          # Fail fast if critical Yoga Layout WASM is missing
          if [ ! -f "packages/yoga-layout/build/wasm/yoga.wasm" ]; then
            echo "::error::Yoga Layout WASM not found! Run build-wasm.yml workflow to prime cache."
            echo "Cache status was: yoga=${{ steps.yoga-cache-valid.outputs.valid }}"
            exit 1
          fi

      - name: Build CLI (required for SEA)
        if: steps.check-platform.outputs.should-run == 'true' && (steps.sea-cache.outputs.cache-hit != 'true' || inputs.force)
        run: pnpm --filter @socketsecurity/cli run build

      - name: Build SEA binary
        if: steps.check-platform.outputs.should-run == 'true' && (steps.sea-cache.outputs.cache-hit != 'true' || inputs.force)
        run: pnpm --filter @socketbin/node-sea-builder run build -- --platform=${{ matrix.platform }} --arch=${{ matrix.arch }}

      - name: Verify SEA binary
        if: steps.check-platform.outputs.should-run == 'true'
        shell: bash
        run: |
          echo "=== SEA Binary Build Artifacts ==="
          mkdir -p packages/node-sea-builder/dist/sea
          ls -lh packages/node-sea-builder/dist/sea/ || true
          echo ""

          # Determine binary name based on platform
          if [ "${{ matrix.platform }}" = "win32" ]; then
            BINARY_NAME="socket-win-${{ matrix.arch }}.exe"
          elif [ "${{ matrix.platform }}" = "darwin" ]; then
            BINARY_NAME="socket-macos-${{ matrix.arch }}"
          else
            BINARY_NAME="socket-${{ matrix.platform }}-${{ matrix.arch }}"
          fi

          BINARY_PATH="packages/node-sea-builder/dist/sea/$BINARY_NAME"
          if [ -f "$BINARY_PATH" ]; then
            echo "$BINARY_NAME size: $(du -h $BINARY_PATH | cut -f1)"
          else
            echo "⚠️  Binary not found at expected path: $BINARY_PATH"
            echo "Contents of dist/sea:"
            ls -la packages/node-sea-builder/dist/sea/ || echo "Directory does not exist"
          fi

      - name: Upload SEA binary
        if: steps.check-platform.outputs.should-run == 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: socket-sea-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            packages/node-sea-builder/dist/sea/socket-win-${{ matrix.arch }}.exe
            packages/node-sea-builder/dist/sea/socket-macos-${{ matrix.arch }}
            packages/node-sea-builder/dist/sea/socket-${{ matrix.platform }}-${{ matrix.arch }}
          retention-days: 7
          if-no-files-found: warn

  summary:
    name: 📊 🌊 SEA Node Build Summary
    needs: [build-sea]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate summary
        run: |
          echo "# 🌊 SEA Node Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "SEA (Single Executable Application) binaries built successfully and cached." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Build Method" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Method | Description | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🌊 SEA | Single Executable Application | ~70 MB |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Platforms Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🐧 Linux (x64, arm64)" >> $GITHUB_STEP_SUMMARY
          echo "- 🍎 macOS (x64, arm64)" >> $GITHUB_STEP_SUMMARY
          echo "- 🪟 Windows (x64, arm64)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- These binaries are now cached for E2E tests" >> $GITHUB_STEP_SUMMARY
          echo "- Use \`publish-socketbin.yml\` to publish to npm" >> $GITHUB_STEP_SUMMARY
          echo "- Cache is invalidated when source files change" >> $GITHUB_STEP_SUMMARY
