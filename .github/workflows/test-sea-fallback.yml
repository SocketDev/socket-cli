name: 🧪 Test SEA Fallback Build

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test (linux, darwin, win32, alpine)'
        required: false
        type: choice
        options:
          - linux
          - darwin
          - win32
          - alpine
        default: linux
      arch:
        description: 'Architecture to test (x64, arm64)'
        required: false
        type: choice
        options:
          - x64
          - arm64
        default: x64
      node_version:
        description: 'Node.js version for SEA (leave empty for auto-detect)'
        required: false
        type: string

env:
  # Auto-detect latest supported Node version if not specified.
  NODE_VERSION: ${{ github.event.inputs.node_version || '' }}

jobs:
  detect-node-version:
    runs-on: ubuntu-latest
    outputs:
      node_version: ${{ steps.detect.outputs.version }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          autocrlf: false
          sparse-checkout: |
            packages/node-smol-builder/scripts/build.mjs

      - uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: '20'

      - name: Detect latest smol Node version
        id: detect
        run: |
          if [ -n "${{ env.NODE_VERSION }}" ]; then
            echo "version=${{ env.NODE_VERSION }}" >> $GITHUB_OUTPUT
          else
            # Fetch latest supported version from yao-pkg.
            VERSION=$(node -e "
              fetch('https://api.github.com/repos/yao-pkg/pkg-fetch/contents/patches')
                .then(r => r.json())
                .then(data => {
                  const versions = data
                    .filter(f => f.name.startsWith('node.v'))
                    .map(f => f.name.match(/node\.v(\d+\.\d+\.\d+)/)?.[1])
                    .filter(Boolean)
                    .sort((a, b) => {
                      const [aMajor, aMinor, aPatch] = a.split('.').map(Number);
                      const [bMajor, bMinor, bPatch] = b.split('.').map(Number);
                      if (aMajor !== bMajor) return bMajor - aMajor;
                      if (aMinor !== bMinor) return bMinor - aMinor;
                      return bPatch - aPatch;
                    });
                  const v24 = versions.find(v => v.startsWith('24.'));
                  const v22 = versions.find(v => v.startsWith('22.'));
                  console.log(v24 || v22 || '24.10.0');
                })
                .catch(() => console.log('24.10.0'));
            ")
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "Detected Node version: ${VERSION}"
          fi

  test-fallback:
    needs: detect-node-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - platform: ${{ github.event.inputs.platform || 'linux' }}
            arch: ${{ github.event.inputs.arch || 'x64' }}
            os: ubuntu-latest

    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          autocrlf: false

      - uses: SocketDev/socket-registry/.github/actions/setup@d8ff3b0581d799466cfbf150f715c1a4bf9f84a5 # main
        with:
          scope: '@socketsecurity'

      - run: pnpm install

      - name: Verify postject installation
        run: pnpm exec postject --help || pnpm add -D postject

      - name: Test 1 - Normal build (should succeed)
        id: normal-build
        run: |
          echo "=== Testing normal SEA build ==="
          pnpm run build --sea -- --platform=${{ matrix.platform }} --arch=${{ matrix.arch }}
          ls -la dist/sea/socket-*
          file dist/sea/socket-* || true

      - name: Clean build artifacts
        run: rm -rf dist/sea

      - name: Test 2 - Force fallback by corrupting Node build
        id: force-fallback
        run: |
          echo "=== Testing fallback mechanism by corrupting Node build ==="
          # Create a corrupted/incomplete Node build to trigger fallback.
          mkdir -p build/node-smol/out/Release
          echo "corrupt" > build/node-smol/out/Release/node

          # Initial build should fail.
          set +e
          pnpm run build --sea -- --platform=${{ matrix.platform }} --arch=${{ matrix.arch }}
          INITIAL_EXIT=$?
          set -e

          if [ $INITIAL_EXIT -eq 0 ]; then
            echo "ERROR: Initial build should have failed but succeeded"
            exit 1
          fi

          echo "Initial build failed as expected (exit code: $INITIAL_EXIT)"
          echo "Now testing fallback with clean rebuild..."

          # Fallback with clean rebuild should succeed.
          node packages/node-smol-builder/scripts/build.mjs --clean --node-version=${{ needs.detect-node-version.outputs.node_version }}
          pnpm run build --sea -- --platform=${{ matrix.platform }} --arch=${{ matrix.arch }}

          echo "Fallback build succeeded!"
          ls -la dist/sea/socket-*
          file dist/sea/socket-* || true

      - name: Test 3 - Verify binary functionality
        if: success()
        run: |
          echo "=== Testing binary functionality ==="
          BINARY="dist/sea/socket-${{ matrix.platform }}-${{ matrix.arch }}"
          if [ "${{ matrix.platform }}" = "win32" ]; then
            BINARY="${BINARY}.exe"
          fi

          # Make executable (Unix only).
          if [ "${{ matrix.platform }}" != "win32" ]; then
            chmod +x "$BINARY"
          fi

          # Test basic functionality.
          "$BINARY" --version || echo "Note: Binary may require native platform to run"

      - name: Upload test artifact
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: test-fallback-binary-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/sea/socket-*
          retention-days: 1

      - name: Test summary
        if: always()
        run: |
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platform:** ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "**Architecture:** ${{ matrix.arch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Node Version:** ${{ needs.detect-node-version.outputs.node_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.normal-build.outcome }}" = "success" ]; then
            echo "✅ Test 1: Normal build - **PASSED**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Test 1: Normal build - **FAILED**" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.force-fallback.outcome }}" = "success" ]; then
            echo "✅ Test 2: Fallback mechanism - **PASSED**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Test 2: Fallback mechanism - **FAILED**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Binary Details" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -lh dist/sea/socket-* 2>/dev/null | awk '{print $NF, $5}' >> $GITHUB_STEP_SUMMARY || echo "No binaries found" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
