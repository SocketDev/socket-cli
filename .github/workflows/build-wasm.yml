name: 🧱 Build WASM Bundle

# Manual workflow for building the unified WASM bundle with AI models.
# This creates a separate release (wasm-build-*) to keep WASM bundles
# separate from regular Socket CLI releases.

on:
  workflow_dispatch:
    inputs:
      force-rebuild:
        description: 'Force rebuild even if build already exists for this commit'
        required: false
        type: boolean
        default: false

permissions:
  contents: write # Required for creating releases and uploading assets

jobs:
  build-wasm:
    name: Build WASM Bundle
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          autocrlf: false

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.11'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@7b1c307e0dcbda6122208f10795a713336a9b35a # stable
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: cargo install wasm-pack

      - name: Install wasm-opt (binaryen)
        run: |
          sudo apt-get update
          sudo apt-get install -y binaryen

      - name: Generate build tag
        id: build-tag
        run: |
          BUILD_DATE=$(date +'%Y%m%d')
          SHORT_SHA=$(git rev-parse --short HEAD)
          BUILD_TAG="wasm-build-${BUILD_DATE}-${SHORT_SHA}"
          echo "tag=${BUILD_TAG}" >> $GITHUB_OUTPUT
          echo "date=${BUILD_DATE}" >> $GITHUB_OUTPUT
          echo "sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check-release
        run: |
          TAG="${{ steps.build-tag.outputs.tag }}"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release $TAG already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release $TAG does not exist"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Exit if release exists and not force rebuild
        if: steps.check-release.outputs.exists == 'true' && !inputs.force-rebuild
        run: |
          echo "❌ Release ${{ steps.build-tag.outputs.tag }} already exists"
          echo "   Use 'force-rebuild' option to rebuild anyway"
          exit 1

      - name: Build WASM bundle
        run: pnpm run wasm:build
        env:
          CI: true

      - name: Verify build output
        run: |
          if [ ! -f external/socket-ai-sync.mjs ]; then
            echo "❌ Build output not found: external/socket-ai-sync.mjs"
            exit 1
          fi

          FILE_SIZE=$(stat -f%z external/socket-ai-sync.mjs 2>/dev/null || stat -c%s external/socket-ai-sync.mjs)
          FILE_SIZE_MB=$((FILE_SIZE / 1024 / 1024))

          echo "✓ Build output verified"
          echo "  Size: ${FILE_SIZE_MB} MB"

          if [ "$FILE_SIZE_MB" -lt 50 ]; then
            echo "❌ Build output too small (expected ~115MB)"
            exit 1
          fi

      - name: Create release
        if: steps.check-release.outputs.exists == 'false' || inputs.force-rebuild
        run: |
          TAG="${{ steps.build-tag.outputs.tag }}"
          DATE="${{ steps.build-tag.outputs.date }}"
          SHA="${{ steps.build-tag.outputs.sha }}"

          gh release create "$TAG" \
            --title "WASM Bundle Build ${DATE}" \
            --notes "## WASM Bundle Build

          **Automated build of unified WASM bundle for Socket CLI AI features.**

          ### Build Information
          - **Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')
          - **Commit**: ${SHA}
          - **Tag**: ${TAG}

          ### Contents
          - ONNX Runtime (~2-5MB)
          - MiniLM model (~17MB int8)
          - CodeT5 encoder (~30MB int4)
          - CodeT5 decoder (~60MB int4)
          - Tokenizers (~1MB)
          - Yoga Layout (~95KB)

          ### INT4 Quantization
          - CodeT5 models use INT4 (4-bit weights) for 50% size reduction
          - Only 1-2% quality loss compared to INT8
          - Total bundle size: ~115MB (vs ~145MB with INT8)

          ### Download
          \`\`\`bash
          node scripts/wasm/download-models.mjs
          \`\`\`

          ### Build from Source
          \`\`\`bash
          pnpm run wasm:build
          \`\`\`

          ---

          This is a pre-release for internal development use." \
            --prerelease \
            external/socket-ai-sync.mjs
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Upload artifact (for debugging)
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: wasm-bundle-${{ steps.build-tag.outputs.tag }}
          path: external/socket-ai-sync.mjs
          retention-days: 7

      - name: Build summary
        run: |
          FILE_SIZE=$(stat -f%z external/socket-ai-sync.mjs 2>/dev/null || stat -c%s external/socket-ai-sync.mjs)
          FILE_SIZE_MB=$((FILE_SIZE / 1024 / 1024))

          echo "## ✅ WASM Bundle Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag**: \`${{ steps.build-tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Size**: ${FILE_SIZE_MB} MB" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Download" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "node scripts/wasm/download-models.mjs" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
